{
    "!?[alt-text](movie-url \"info\")": {
        "body": "!?[${1:alt-text}](${2:movie-url} \"{3:info}\")",
        "description": "Optional information can be attached to every video by adding double quotes after the link in the parentheses. This will be attached as a subtitle to this element and can also include Markdown syntax.\n\nExample:\n\n  !?[eLab](https://www.youtube.com/watch?v=bICfKRyKTwE \"Some information about the previous __eLab__ project.\")",
        "prefix": "lia-movie-info"
    },
    "!?[alt-text](movie-url)": {
        "body": "!?[${1:alt-text}](${2:movie-url})",
        "description": "Include movies is like combining images and sound by a starting exclamation mark followed by a question mark (!?) as depicted below. Paths can either be absolute or relative. You can add also styles, classes, or any other allowed options to it simply by appending a comment tag.\n\nTo simplify the usage, you can directly use the YouTube link, or Vimeo, or TeacherTube. Those resources are atomatically parsed and included appropriately into the document, without searching for an embed-code.\n\nExample:\n\n  !?[eLab](https://www.youtube.com/watch?v=bICfKRyKTwE)\n\n  !?[relative](./mov/video.mp4)\n\n  !?[eLab](https://www.youtube.com/watch?v=bICfKRyKTwE)<!--\n      title = \"the elab in gray\"\n      width = \"90%\"\n      style = \"border: 10px solid; filter: grayscale(100%);\"\n    -->\n\nBut it is still possible to use HTML to include Videos and other stuff ...\n\n  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bICfKRyKTwE\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
        "prefix": "lia-movie"
    },
    "![alt-text](image-url \"info\")": {
        "body": "![${1:alt-text}](${2:image-url} \"${3:info}\")",
        "description": "Optional information can be attached to every image by adding double quotes after the link in the parentheses. This will be attached as a subtitle to this element and can also include Markdown syntax.\n\nExample:\n\n  ![image of a puppy](https://upload.wikimedia.org/wikipedia/commons/c/c7/Puppy_on_Halong_Bay.jpg \"This image is free __CC0__\")\n\n  ![relative](./img/puppy.jpg \"A cute image of a __puppy__\")",
        "prefix": "lia-image-info"
    },
    "![alt-text](image-url)": {
        "body": "![${1:alt-text}](${2:image-url})",
        "description": "Include images via the common Markdown notation as depicted below, by using absolute or relative paths. In contrast to common Markdown you can add also styles, classes, or any other allowed image tag to it simply by appending a comment tag.\n\nExample:\n\n  ![image of a puppy](https://upload.wikimedia.org/wikipedia/commons/c/c7/Puppy_on_Halong_Bay.jpg)\n\n  ![relative](./img/puppy.jpg)\n\n  ![with styling](./img/puppy.jpg)<!--\n      title = \"a gray puppy\"\n      width = \"300px\"\n      style = \"border: 10px solid; filter: grayscale(100%);\"\n    -->",
        "prefix": "lia-image"
    },
    "![alt-text](url)": {
        "body": "![${1:alt-text}](${2:url}) ![${3:alt-text}](${4:url})",
        "description": "If you group multimedia links within one line or within one block, they will appear as a gallery within LiaScript.\n\nExample:\n\n  ![image of a puppy](https://upload.wikimedia.org/wikipedia/commons/c/c7/Puppy_on_Halong_Bay.jpg)\n  ??[circuit simulator](https://falstad.com/circuit/circuitjs.html)\n  ??[Pottery Jar 3D model](https://sketchfab.com/3d-models/pottery-jar-0576d43d28924c948ed3bbae02e4e0cb)",
        "prefix": "lia-gallery"
    },
    "# Main Title": {
        "body": "# ${1:Main Title}\n",
        "description": "As in common Markdown, a document is segregated into different parts by its titles. A title starts with hash-tag (#) that is followed by an head-line. The number of subsequent hash-tags defines the order. It is furthermore possible to overwrite some of the definitions from the main header, see more information on this by typing \"liaheadersection\" ...\n\nExample:\n  # Main Title\n\n  ...\n\n  ## Chapter Title\n  <!--\n  comment: This comment is only for demonstrating purposes\n           and will be overwritten within the next slide...\n\n  author:  New Author\n  email:   notmain@email.com\n  -->\n\n  ...\n\n  ### Section __Title__\n\n  ...\n\nIt is possible to add styling elements to the titles, but this should be used only in some rare cases.",
        "prefix": "lia-title-1"
    },
    "## Chapter Title": {
        "body": "## ${1:Chapter Title}\n",
        "description": "As in common Markdown, a document is segregated into different parts by its titles. A title starts with hash-tag (#) that is followed by an head-line. The number of subsequent hash-tags defines the order. It is furthermore possible to overwrite some of the definitions from the main header, see more information on this by typing \"liaheadersection\" ...\n\nExample:\n  # Main Title\n\n  ...\n\n  ## Chapter Title\n  <!--\n  comment: This comment is only for demonstrating purposes\n           and will be overwritten within the next slide...\n\n  author:  New Author\n  email:   notmain@email.com\n  -->\n\n  ...\n\n  ### Section __Title__\n\n  ...\n\nIt is possible to add styling elements to the titles, but this should be used only in some rare cases.",
        "prefix": "lia-title-2"
    },
    "### Section Title": {
        "body": "### ${1:Section Title}\n",
        "description": "As in common Markdown, a document is segregated into different parts by its titles. A title starts with hash-tag (#) that is followed by an head-line. The number of subsequent hash-tags defines the order. It is furthermore possible to overwrite some of the definitions from the main header, see more information on this by typing \"liaheadersection\" ...\n\nExample:\n  # Main Title\n\n  ...\n\n  ## Chapter Title\n  <!--\n  comment: This comment is only for demonstrating purposes\n           and will be overwritten within the next slide...\n\n  author:  New Author\n  email:   notmain@email.com\n  -->\n\n  ...\n\n  ### Section __Title__\n\n  ...\n\nIt is possible to add styling elements to the titles, but this should be used only in some rare cases.",
        "prefix": "lia-title-3"
    },
    "#### SubSection Title": {
        "body": "#### ${1:SubSection Title}\n",
        "description": "As in common Markdown, a document is segregated into different parts by its titles. A title starts with hash-tag (#) that is followed by an head-line. The number of subsequent hash-tags defines the order. It is furthermore possible to overwrite some of the definitions from the main header, see more information on this by typing \"liaheadersection\" ...\n\nExample:\n  # Main Title\n\n  ...\n\n  ## Chapter Title\n  <!--\n  comment: This comment is only for demonstrating purposes\n           and will be overwritten within the next slide...\n\n  author:  New Author\n  email:   notmain@email.com\n  -->\n\n  ...\n\n  ### Section __Title__\n\n  ...\n\nIt is possible to add styling elements to the titles, but this should be used only in some rare cases.",
        "prefix": "lia-title-4"
    },
    "##### Paragraph Title": {
        "body": "##### ${1:Paragraph Title}\n",
        "description": "As in common Markdown, a document is segregated into different parts by its titles. A title starts with hash-tag (#) that is followed by an head-line. The number of subsequent hash-tags defines the order. It is furthermore possible to overwrite some of the definitions from the main header, see more information on this by typing \"liaheadersection\" ...\n\nExample:\n  # Main Title\n\n  ...\n\n  ## Chapter Title\n  <!--\n  comment: This comment is only for demonstrating purposes\n           and will be overwritten within the next slide...\n\n  author:  New Author\n  email:   notmain@email.com\n  -->\n\n  ...\n\n  ### Section __Title__\n\n  ...\n\nIt is possible to add styling elements to the titles, but this should be used only in some rare cases.",
        "prefix": "lia-title-5"
    },
    "###### SubParagraph Title": {
        "body": "##### ${1:SubParagraph Title}\n",
        "description": "As in common Markdown, a document is segregated into different parts by its titles. A title starts with hash-tag (#) that is followed by an head-line. The number of subsequent hash-tags defines the order. It is furthermore possible to overwrite some of the definitions from the main header, see more information on this by typing \"liaheadersection\" ...\n\nExample:\n  # Main Title\n\n  ...\n\n  ## Chapter Title\n  <!--\n  comment: This comment is only for demonstrating purposes\n           and will be overwritten within the next slide...\n\n  author:  New Author\n  email:   notmain@email.com\n  -->\n\n  ...\n\n  ### Section __Title__\n\n  ...\n\nIt is possible to add styling elements to the titles, but this should be used only in some rare cases.",
        "prefix": "lia-title-6"
    },
    "$ f(x) = (x^2+5)^3 $": {
        "body": "$ ${1:f(a,b,c) = (a^2+b^2+c^2)^3} $",
        "description": "Insert a mathematical formula (inline) within your text. It has to be enclosed with two single dollar signs, as shown in the example.\n\nExample: $ f(a,b,c) = (a^2+b^2+c^2)^3 $\n\nFormulas are rendered with KaTex, so click on the link below to get more information and examples on the applied notation.",
        "prefix": "lia-formula-inline"
    },
    "$$ \\sum_\\{i=1\\}^\\\\infty\\ ... $$": {
        "body": "$$\n   ${1:\\\\sum_\\{i=1\\}^\\\\infty\\\\frac\\{1\\}\\{n^2\\}\n        =\\\\frac\\{\\\\pi^2\\}\\{6\\}}\n$$",
        "description": "Insert a more multiline mathematical formula as a block, which is automatically centered within your document. It has to be enclosed with two dollar signs, as shown in the example.\n\nExample:\n\n$$\n   \\sum_{i=1}^\\infty\\frac{1}{n^2}\n        =\\frac{\\pi^2}{6}\n$$\n\nFormulas are rendered with KaTex, so click on the link below to get more information and examples on the applied notation.",
        "prefix": "lia-formula-block"
    },
    "* ... + ... - ...": {
        "body": "+ ${1:block}\n+ ${2:block}\n+ ${3:block}",
        "description": "Insert a Markdown unordered list, as depicted below. You can use (*+-) to begin every point. Indentation is important in this case.\n\nExample:\n  * first point\n  + second point\n  - some text\n\n    and some image ![image](img/point.jpg)",
        "prefix": "lia-list-unordered"
    },
    "*** ... ***": {
        "body": "****************************************\n\n${1:Add a solution explanation __Markdown__!}\n\n****************************************",
        "description": "If the user solved a quiz or clicked onto resolve, the correct answer gets automatically revealed, but you can add additional information to your solution by adding two lines to the end of your quiz that can contain multiple Markdown blocks as explanation.\n\nExample:\n  What is the color of the sky?\n\n    [[blue]]\n    [[?]] Enter blue!\n    *************************************\n\n    During the day the color is blue, if\n    it is not cloudy. See the following\n    picture ...\n\n    ![blue sky](./img/sunny.jpg)\n\n    *************************************",
        "prefix": "lia-quiz-solution"
    },
    "***text***": {
        "body": "***${1:italic bold}***",
        "prefix": "lia-text-italic-bold2"
    },
    "**text**": {
        "body": "**${1:bold}**",
        "prefix": "lia-text-bold2"
    },
    "*text*": {
        "body": "*${1:italic}*",
        "prefix": "lia-text-italic2"
    },
    "---": {
        "body": "----------------------\n",
        "description": "Horizontal lines are realized by adding at least 3 hyphens in a row (---), but more hyphens look a little bit nicer ;)\n\nExample:\n  This is a horizontal line:\n\n    ---\n\n  And this also:\n\n  ---------------------------------------------",
        "prefix": "lia-horizontal-line"
    },
    "--{{number voice}}--": {
        "body": "              --{{${1:number} ${2:voice}}}--\n${3:Enter some **text** that gets read out aloud with another voice.\nOnly paragraphs are allowed!}'",
        "description": "You can change the voice also per comment by adding it directly after the number of appearance.\nType \"voice\" for fuzzy searching all responsive voices or click on the link below.\n\nExample:\n        --{{0 Australian Female}}--\n  I will speak with a female Australian accent,\n  no matter what the default language is.\n\n        --{{0 Deutsch Male}}--\n  Und hier äußert sich gerade ein deutscher Mann.",
        "prefix": "lia-comment-voice"
    },
    "--{{number}}--": {
        "body": "              --{{${1:number}}}--\n${2:Enter some **text** that gets read out aloud.\nOnly paragraphs are allowed!}'",
        "description": "Comments are those elements that get read out aloud in slide and presentation mode and a printed out at the placed position in textbook mode. Only paragraphs are allowed as comments and Markdown can be applied for styling different elements.\nThe default voice is defined within the main header, if not english will be used. This main voice can be changed per section by adding a section comment.\n\nExample:\n  <!--\n  author:   ...\n  email:    ...\n  ...\n  narrator: UK English Female\n  -->\n\n  # Title\n\n               --{{0}}--\n  I will speak with a female *UK* accent.\n\n  ## Section\n  <!-- narrator: US English Male -->\n\n               --{{0}}--\n  This entire section will be spoken aloud american man.\n\n               --{{1}}--\n  But only this section...\n\nTo simplify the voice-search, simply start typing \"voice\" and fuzzy search all responsive voice or click on the link below.",
        "prefix": "lia-comment"
    },
    "-[ ] github task": {
        "body": "-[${1:X}] ${2:line with Markdown}",
        "description": "Use the GitHub-flavoured Markdown syntax for tasks. If the version of the course is larger than 1, the task-states will be stored persistently.\n\nYou can define as much tasks as you want\n\nExample:\n\n  -[ ] This is not checked by default\n  -[X] This one is checked by default",
        "prefix": "lia-task"
    },
    "-[ ] github task ... <script>...</script>": {
        "body": "-[${1:X}] ${2:task-definition}\n-[${3:X}] ${4:task-definition}\n<script>\n  ${5:js-code}\n</script>",
        "description": "Use the GitHub-flavoured Markdown syntax for tasks in association with JavaScript-code that is executed on every input.\n\nYou can define as much tasks as you want.\n\nExample:\n\n  - [X] Biology\n  - [ ] Chemistry\n  <script output=\"tasks\">\"@input\"</script>\n\n  <script style=\"width: 100%\">\n  try {\n    let task = @input(`tasks`) // interpret the output=\"tasks\"\n\n    if(task[0]) {\n      send.liascript(`## Biology\n\n  Hey, great, you want to learn something about Biology.\n\n  * resource 1\n  * resource 2\n\n  The input from the tasks above was: `[${task}]``)\n    } else send.clear()\n  } catch(e) { }\n  </script>",
        "prefix": "lia-task-js"
    },
    "1 colum table": {
        "body": "| ${1:Header}     |\n| :--------- |\n| ${2:Item}       |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-1"
    },
    "1. ... 2. ... 3. ...": {
        "body": "1. ${1:block}\n2. ${2:block}\n3. ${3:block}",
        "description": "Insert a Markdown ordered list, as depicted below. Indentation is important in this case.\n\nExample:\n  1. first point\n  2. second point\n  3. some text\n\n     and some image ![image](img/point.jpg)",
        "prefix": "lia-list-ordered"
    },
    "2 colum table": {
        "body": "| Header 1   | Header 2   |\n| :--------- | :--------- |\n| Item 1     | Item 2     |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-2"
    },
    "3 colum table": {
        "body": "| Header 1   | Header 2   | Header 3   |\n| :--------- | :--------- | :--------- |\n| Item 1     | Item 2     | Item 3     |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-3"
    },
    "4 colum table": {
        "body": "| Header 1   | Header 2   | Header 3   | Header 4   |\n| :--------- | :--------- | :--------- | :--------- |\n| Item 1     | Item 2     | Item 3     | Item 4     |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-4"
    },
    "5 colum table": {
        "body": "| Header 1   | Header 2   | Header 3   | Header 4   | Header 5   |\n| :--------- | :--------- | :--------- | :--------- | :--------- |\n| Item 1     | Item 2     | Item 3     | Item 4     | Item 5     |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-5"
    },
    "6 colum table": {
        "body": "| Header 1   | Header 2   | Header 3   | Header 4   | Header 5   | Header 6   |\n| :--------- | :--------- | :--------- | :--------- | :--------- | :--------- |\n| Item 1     | Item 2     | Item 3     | Item 4     | Item 5     | Item 6     |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-6"
    },
    "7 colum table": {
        "body": "| Header 1   | Header 2   | Header 3   | Header 4   | Header 5   | Header 6   | Header 7   |\n| :--------- | :--------- | :--------- | :--------- | :--------- | :--------- | :--------- |\n| Item 1     | Item 2     | Item 3     | Item 4     | Item 5     | Item 6     | Item 7     |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-7"
    },
    "8 colum table": {
        "body": "| Header 1   | Header 2   | Header 3   | Header 4   | Header 5   | Header 6   | Header 7   | Header 8   |\n| :--------- | :--------- | :--------- | :--------- | :--------- | :--------- | :--------- | :--------- |\n| Item 1     | Item 2     | Item 3     | Item 4     | Item 5     | Item 6     | Item 7     | Item 8     |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-8"
    },
    "9 colum table": {
        "body": "| Header 1   | Header 2   | Header 3   | Header 4   | Header 5   | Header 6   | Header 7   | Header 8   | Header 9   |\n| :--------- | :--------- | :--------- | :--------- | :--------- | :--------- | :--------- | :--------- | :--------- |\n| Item 1     | Item 2     | Item 3     | Item 4     | Item 5     | Item 6     | Item 7     | Item 8     | Item 9     |",
        "description": "There must be at least 3 dashes separating each header cell. Cells are separated by pipes (|), and you don't need to make the raw Markdown line up prettily. Hyphens (-) are used to separate the table header from the body, whereby the colons are used to align the columns.\n\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |",
        "prefix": "lia-table-9"
    },
    "< ... # ... [": {
        "body": "<!--\nauthor:   Your Name\n\nemail:    your@mail.org\n\nversion:  0.0.1\n\nlanguage: en\n\nnarrator: US English Female\n\ncomment:  Try to write a short comment about\n          your course, multiline is also okay.\n\nlink:     https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\n\nscript:   https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js\n\ntranslation: Deutsch  translations/German.md\n\ntranslation: Français translations/French.md\n-->\n\n# Course Main Title\n\nThis is your **course** initialization stub.\n\nPlease see the [Docs](https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md)\nto find out what is possible in [LiaScript](https://liascript.github.io).\n\nIf you want to use instant help in your Atom IDE, please type **lia** to see all available shortcuts.\n\n## Markdown\n\nYou can use common [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) syntax to create your course, such as:\n\n1. Lists\n2. ordered or\n\n   * unordered\n   * ones ...\n\n\n| Header 1   | Header 2   |\n| :--------- | :--------- |\n| Item 1     | Item 2     |\n\n\nImages:\n\n![images](https://farm2.static.flickr.com/1618/26701766821_7bea494826.jpg)\n\n\n### Extensions\n\n     --{{0}}--\nBut you can also include other features such as spoken text.\n\n      --{{1}}--\nInsert any kind of audio file:\n\n       {{1}}\n?[audio](https://bigsoundbank.com/UPLOAD/mp3/1068.mp3)\n\n\n     --{{2}}--\nEven videos or change the language completely.\n\n       {{2-3}}\n!?[video](https://www.youtube.com/watch?v=bICfKRyKTwE)\n\n\n      --{{3 Russian Female}}--\nПервоначально создан в 2004 году Джоном Грубером (англ. John Gruber) и Аароном\nШварцем. Многие идеи языка были позаимствованы из существующих соглашений по\nразметке текста в электронных письмах...\n\n\n    {{3}}\nType \"voice\" to see a list of all available languages.\n\n\n### Styling\n\n<!-- class = \"animated rollIn\" style = \"animation-delay: 2s; color: purple\" -->\nThe whole text-block should appear in purple color and with a wobbling effect.\nWhich is a **bad** example, please use it with caution ...\n~~ only this is red ;-) ~~ <!-- class = \"animated infinite bounce\" style = \"color: red;\" -->\n\n## Charts\n\nUse ASCII-Art to draw diagrams:\n\n                                    Multiline\n    1.9 |    DOTS\n        |                 ***\n      y |               *     *\n      - | r r r r r r r*r r r r*r r r r r r r\n      a |             *         *\n      x |            *           *\n      i | B B B B B * B B B B B B * B B B B B\n      s |         *                 *\n        | *  * *                       * *  *\n     -1 +------------------------------------\n        0              x-axis               1\n\n## Quizzes\n\n### A Textquiz\n\nWhat did the **fish** say when he hit a **concrete wall**?\n\n    [[dam]]\n\n### Multiple Choice\n\nJust add as many points as you wish:\n\n    [[X]] Only the **X** marks the correct point.\n    [[ ]] Empty ones are wrong.\n    [[X]] ...\n\n### Single Choice\n\nJust add as many points as you wish:\n\n    [( )] ...\n    [(X)] <-- Only the **X** is allowed.\n    [( )] ...\n\n## Executable Code\n\nA drawing example, for demonstrating that any JavaScript library can be used, also for drawing.\n\n```javascript\n// Initialize a Line chart in the container with the ID chart1\nnew Chartist.Line('#chart1', {\n  labels: [1, 2, 3, 4],\n  series: [[100, 120, 180, 200]]\n});\n\n// Initialize a Line chart in the container with the ID chart2\nnew Chartist.Bar('#chart2', {\n  labels: [1, 2, 3, 4],\n  series: [[5, 2, 8, 3]]\n});\n```\n<script>@input</script>\n\n<div class=\"ct-chart ct-golden-section\" id=\"chart1\"></div>\n<div class=\"ct-chart ct-golden-section\" id=\"chart2\"></div>\n\n\n### Projects\n\nYou can make your code executable and define projects:\n\n``` js     -EvalScript.js\nlet who = data.first_name + \" \" + data.last_name;\n\nif(data.online) {\n  who + \" is online\"; }\nelse {\n  who + \" is NOT online\"; }\n```\n``` json    +Data.json\n{\n  \"first_name\" :  \"Sammy\",\n  \"last_name\"  :  \"Shark\",\n  \"online\"     :  true\n}\n```\n<script>\n  // insert the JSON dataset into the local variable data\n  let data = @input(1);\n\n  // eval the script that uses this dataset\n  eval(`@input(0)`);\n</script>\n\n## More\n\nFind out what you can even do more with quizzes:\n\nhttps://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md",
        "description": "Initialize your file with a complete dummy course with a header and body, which can be used as a bootstrap for your course.\n\nExample:\n\n    <!--\n    author:   Your Name\n\n    email:    your@mail.org\n\n    version:  0.0.1\n\n    language: en\n\n    narrator: US English Female\n\n    ...\n    -->\n\n    # Course Main Title\n\n    This is your **course** initialization stub...",
        "prefix": "lia-init"
    },
    "<!-- --{{number voice}}-- ... -->": {
        "body": "<!-- --{{${1:number} ${2:voice}}}-- ${3:Enter some **text** that gets read out aloud!} -->",
        "description": "If you want to speak out some additional text that shall not appear in the textbook mode and speak with another voice, then simply put your comment with a voice definition into a HTML comment tag.\n\nExample:\n  <!-- --{{2 Deutsch Female}}--\n  I will speak with a German voice, but not appear\n  elsewhere within the document.\n  -->\n\nType \"voice\" for fuzzy searching or click on the link below for more information.",
        "prefix": "lia-comment-voice-hidden"
    },
    "<!-- --{{number}}-- ... -->": {
        "body": "<!-- --{{${1:number}}}-- ${2:Enter some **text** that gets read out aloud!} -->",
        "description": "If you want to speak out some additional text that shall not appear in the textbook mode, then simply put your comment into a HTML comment tag.\n\nExample:\n  <!-- --{{2}}--\n  I will speak with the default voice, but not appear\n  elsewhere within the document.\n  -->",
        "prefix": "lia-comment-hidden"
    },
    "<!-- class=\"animated rollIn\" ... -->": {
        "body": "<!-- class=\"animated rollIn\" style=\"animation-delay: 3s;\" -->",
        "description": "This is only an example of how Animate.css can be used to tweak your effects. Additional CSS magic can be applied onto single elements or blocks by adding a comment tag either in front of the block or directly after the element.\n\nExample:\n\n  <!-- class = \"animated rollIn\" style = \"animation-delay: 3s; color: purple\" -->\n  The whole text-block should appear in purple color and with a wobbling effect.\n  Which is a **bad** example, please use it with caution ...\n  ~~ Jumping red ~~ <!-- class = \"animated infinite bounce\" style = \"color: red;\" -->\n\nFor more information how to change the animation styles, click on the link below.",
        "prefix": "lia-effect-animate-example"
    },
    "<!-- data-show -->": {
        "body": "<!-- data-show -->",
        "description": "Simply add this attribute or set it to true (data-show=\"true\"), if you want to visualize your data immediately, without the need to click in the switch-button. It is still possible for your users to switch to the table representation.\n\nExample:\n  <!-- data-show -->\n  | Sankey |  A  |  B  |  C  |  D  |  E  |\n  |:------ |:---:|:---:|:---:|:---:|:---:|\n  | A      |     |  2  |     |     |     |\n  | B      |  3  |     |     |     |     |\n  | C      |  1  |  1  |     |     |     |\n  | D      |     |  1  |  1  |     |     |\n  | E      |  2  |  1  |  1  |  1  |     |",
        "prefix": "lia-table-diagram-show"
    },
    "<!-- data-src=\"..\" -->": {
        "body": "<!-- data-src=\"${1:url}\" -->",
        "description": "Currently this attribute is used to refere to your geojson data, if you use the `data-type=\"Map\"` representation, but this might change in the future to load and visualize data directly, such as csv.\nIf you are using geojson files from external websites such as: https://code.highcharts.com/mapdata/\nIt can be usefull to use anycors, if the data cannot be visualized due to CORS restrictions:\n\ndata-src=\"https://cors-anywhere.herokuapp.com/https://code.highcharts.com/mapdata/custom/europe.geo.json\"\n\nExample:\n  <!-- data-type=\"map\" data-src=\"https://code.highcharts.com/mapdata/custom/europe.geo.json\" -->\n  | Country                | percent |\n  | ---------------------- | ------- |\n  | Albania                | 73.5    |\n  | Andorra                | 98.9    |\n  | Armenia                | 72.4    |\n  | ...                    |         |",
        "prefix": "lia-table-diagram-source"
    },
    "<!-- data-title=\"...\" -->": {
        "body": "<!-- data-title=\"${1:title}\" -->",
        "description": "You can set the diagram title for your plotted document via the data-title parameter, this is only visible if you switch to the diagram mode.\n\nExample:\n  <!--\n  data-title=\"Government expenditure on education\"\n  data-xlabel=\"year\"\n  data-ylabel=\"% of GDP\"\n  -->\n  | Year | Finland | USA | Germany |   China |\n  | ---- | -------:| ---:| -------:| -------:|\n  | 1995 | 6.80942 |     | 4.42079 | 1.84192 |\n  | 1996 | 6.86052 |     | 4.48319 | 1.85338 |\n  | ...  |     ... | ... |     ... |     ... |",
        "prefix": "lia-table-diagram-title"
    },
    "<!-- data-transpose -->": {
        "body": "<!-- data-transpose -->",
        "description": "Like in the mathematical sense, set this attribute or set it to true (data-transpose=\"true\"), if you want to switch rows and columns. One benefit is, that you can for example use PieChart and let your table grow vertically instead of using a horizontal monster.\n\nExample:\n  <!-- data-transpose -->\n  | Music-Style {0-1}{1994} {1}{2014} |      Student rating |\n  |:--------------------------------- | -------------------:|\n  | Classic                           |   {0-1}{50} {1}{20} |\n  | Country                           |   {0-1}{50} {1}{30} |\n  | Reggae                            |                 100 |\n  | Hip-Hop                           | {0-1}{200} {1}{220} |\n  | Hard-Rock                         | {0-1}{350} {1}{400} |\n  | Samba                             | {0-1}{250} {1}{230} |",
        "prefix": "lia-table-diagram-transpose"
    },
    "<!-- data-type=\"...\" -->": {
        "body": "<!-- data-type=\"${1:type}\" -->",
        "description": "You can enforce the visualization of a certain type, even if the sturcture of your table might look different.\nCurrently available data-types are: lineplot, scatterplot, boxplot, barchart, radar, piechart, map, heatmap, parallel, graph, sankey, and none\nIf you do not want to show tables as diagrams, you can also use data-type=\"None\" and only the table will be visible.\n\nExample:\n  <!-- data-type=\"pie\" -->\n  | Year | Finland | USA | Germany |   China |\n  | ---- | -------:| ---:| -------:| -------:|\n  | 1995 | 6.80942 |     | 4.42079 | 1.84192 |\n  | 1996 | 6.86052 |     | 4.48319 | 1.85338 |\n  | ...  |     ... | ... |     ... |     ... |",
        "prefix": "lia-table-diagram-type"
    },
    "<!-- data-type=\"barchart\" -->": {
        "body": "<!-- data-type=\"barchart\" -->",
        "description": "In contrast to a line or a scatter plot, if the first colum contains at least one entry thant cannot be parsed as a number, this might be represented also as BarChart. Which works perfectly with the following example. If the maximum values of the columns do not differ to much, then this dataset it represented as a BarChart, otherwise you might end up seeing only one huge bar, while the other bars are indistiguishable from each other. In this case other visualization are chosen.\n\nExample:\n  <!-- data-type=\"barchart\" -->\n  | Animal          | weight in kg | Lifespan years | Mitogen |\n  | --------------- | ------------:| --------------:| -------:|\n  | Mouse           |        0.028 |              2 |      95 |\n  | Flying squirrel |        0.085 |             15 |      50 |\n  | Brown bat       |        0.020 |             30 |      10 |\n  | Sheep           |           90 |             12 |      95 |\n  | Human           |           68 |             70 |      10 |",
        "prefix": "lia-table-diagram-barchart"
    },
    "<!-- data-type=\"boxplot\" -->": {
        "body": "<!-- data-type=\"boxplot\" -->",
        "description": "If you have a ScatterPlot like representation, but actually want to use this data as primary data for your BoxPlot, you can manually change the type of visualization to BoxPlot, simply by adding the follwing attribute to the head of your table, as it is shown in the snippet below. Columns are then treated as datasets and get visualized accordingly.\n\nExample:\n  <!-- data-type=\"boxplot\" -->\n  | Random |    I |  II |\n  | ------:| ----:| ---:|\n  |    5.0 |  1.0 |   5 |\n  |    6.0 |  1.0 |   4 |\n  |    7.0 |  1.0 |   5 |\n  |    8.0 |  1.0 |   5 |\n  |    9.0 |  1.0 |   4 |\n  |   10.0 |  1.0 |   5 |\n  |    5.0 | 10.0 |   7 |\n  |    6.0 | 10.0 |   8 |\n  |    7.0 | 10.0 |   7 |\n  |    8.0 | 10.0 |   7 |\n  |    9.0 | 10.0 |   8 |",
        "prefix": "lia-table-diagram-boxplot"
    },
    "<!-- data-type=\"graph\" -->": {
        "body": "<!-- data-type=\"graph\" -->",
        "description": "If the first column and the head of the table are equal, then the interpreter tries to interpret the content of the table as an adjacency matrix, which defines a graph. If those values are symetrical according to the diagonal, then the matrix defines an \"undirected graph\".\nIn contrast to this, if those values differ, then the result is simply an an \"directed graph\", whereby the values define the strength of the line.\n\nExample:\n  <!-- data-title=\"Undirected Graph\" -->\n  | Graph |  A  |  B  |  C  |  D  |  E  |\n  |:----- |:---:|:---:|:---:|:---:|:---:|\n  | A     |  0  |  1  |  0  |  1  |  0  |\n  | B     |  1  |  0  |  0  |  1  |  0  |\n  | C     |  0  |  0  |  0  |  0  |  0  |\n  | D     |  1  |  1  |  0  |  0  |  1  |\n  | E     |  0  |  0  |  0  |  1  |  0  |\n\n  <!-- data-title=\"Directed Graph\" -->\n  | Graph |  A  |  B  |  C  |  D  |  E  |\n  |:----- |:---:|:---:|:---:|:---:|:---:|\n  | A     |  0  | 12  |  0  |  1  |  0  |\n  | B     | -22 |  0  |  0  | 0.4 |  0  |\n  | C     |  0  |  0  |  0  |  0  |  0  |\n  | D     |  2  | 12  |  0  |  0  |  1  |\n  | E     |  0  |  0  |  0  |  2  |  0  |",
        "prefix": "lia-table-diagram-graph"
    },
    "<!-- data-type=\"heatmap\" -->": {
        "body": "<!-- data-type=\"heatmap\" -->",
        "description": "Another type of visualization is a HeatMap, which is used, if the table head and the first column do only contain numbers, in other words coordinates. If you want to use categories instead of coordinate numbers, you can enforce the usage of a heatmap, with the comment shown below:\n\nExample:\n  <!--\n  data-type=\"heatmap\"\n  data-title=\"Seattle mean temperature in Fahrenheit\"\n  data-show\n  -->\n    | Seattle |  Jan |  Feb |  Mar |  Apr |  May |  ... |\n    | -------:| ----:| ----:| ----:| ----:| ----:| ----:|\n    |       0 | 40.7 | 41.5 | 43.6 | 46.6 | 51.4 |  ... |\n    |       2 |  ... |  ... |  ... |  ... |  ... |  ... |",
        "prefix": "lia-table-diagram-heatmap"
    },
    "<!-- data-type=\"lineplot\" -->": {
        "body": "<!-- data-type=\"lineplot\" -->",
        "description": "If the first column contains (not repeating) numbers as well as the other columns, lineplots are used as the default representation, a special tag is not required. If this isn't the case, then you can apply this tag to enforce the visualization as a scatterplot.\n\nExample:\n  <!-- data-type=\"lineplot\" -->\n  | x's |  some y's  |    dist |\n  | --- |:----------:| -------:|\n  | 1   |    1 $    | 16 $km$ |\n  | 2.2 |    2 $    | 12 $km$ |\n  | 3.3 |    5 $    |  1 $km$ |\n  | 4   | -12.333 $ |         |",
        "prefix": "lia-table-diagram-lineplot"
    },
    "<!-- data-type=\"map\" -->": {
        "body": "<!-- data-type=\"map\" -->",
        "description": "A map is similar to a BarChart from the table structure, but if you want to depict your data on a real map, you will have to add a geojson-file, that contains all relevant data about the form of your countries, states, cities, etc. The first column has to match the names of your objects in your geojson data, that is attached to your table in the following way:\n\nExample:\n  <!-- data-type=\"map\" data-src=\"https://code.highcharts.com/mapdata/custom/europe.geo.json\" -->\n  | Country                | percent |\n  | ---------------------- | ------- |\n  | Albania                | 73.5    |\n  | Andorra                | 98.9    |\n  | Armenia                | 72.4    |\n  | ...                    |         |",
        "prefix": "lia-table-diagram-map"
    },
    "<!-- data-type=\"none\" -->": {
        "body": "<!-- data-type=\"none\" -->",
        "description": "Simply data-type=\"none\" to prevent any kind of visualization.\n\nExample:\n  <!-- data-type=\"none\" -->\n  | Sankey |  A  |  B  |  C  |  D  |  E  |\n  |:------ |:---:|:---:|:---:|:---:|:---:|\n  | A      |     |  2  |     |     |     |\n  | B      |  3  |     |     |     |     |\n  | C      |  1  |  1  |     |     |     |\n  | D      |     |  1  |  1  |     |     |\n  | E      |  2  |  1  |  1  |  1  |     |",
        "prefix": "lia-table-diagram-none"
    },
    "<!-- data-type=\"parallel\" -->": {
        "body": "<!-- data-type=\"parallel\" -->",
        "description": "A Parallel representation jumps in, if there are simply too many categories, so that your BarChart would contain only thin lines.\n\nExample:\n  <!-- data-type=\"parallel\" -->\n  | Country                | GDP growth (%) | Births per woman | Life expectancy ...\n  | ---------------------- | --------------:| ----------------:| -------------------\n  | Albania                |            7.5 |            1.858 |               76.63\n  | Andorra                |          3.570 |            1.260 |                 NaN\n  | Austria                |          2.178 |            1.414 |               80.44\n  | ...                    |            ... |              ... |                 ...",
        "prefix": "lia-table-diagram-parallel"
    },
    "<!-- data-type=\"piechart\" -->": {
        "body": "<!-- data-type=\"piechart\" -->",
        "description": "If you have a table with only one row full of numbers, this will be automatically presented as an pie chart. The head represents the categories and the body the quatities.\n\nExample:\n  | Classic | Country | Reggae | Hip-Hop | Hard-Rock | Samba |\n  | -------:| -------:| ------:| -------:| ---------:| -----:|\n  |      50 |      50 |    100 |     200 |       350 |   250 |\n\n  <!-- data-type=\"PieChart\" -->\n  | Music-Style | Classic | Country | Reggae | Hip-Hop | Hard-Rock | Samba |\n  |:----------- | -------:| -------:| ------:| -------:| ---------:| -----:|\n  | 1994        |      50 |      50 |    100 |     200 |       350 |   250 |\n  | 2014        |      20 |      30 |    100 |     220 |       400 |   230 |\n  | demo 2034   |       5 |      12 |     98 |     293 |       345 |    32 |",
        "prefix": "lia-table-diagram-piechart"
    },
    "<!-- data-type=\"radar\" -->": {
        "body": "<!-- data-type=\"radar\" -->",
        "description": "If for example humans and sheeps are removed from the dataset, then wheight in kg would not be visible in a BarChart at all. In this case a Radar is selected, that allows to analyze data visually with different \"y\"-axis.\n\nExample:\n  <!-- data-type=\"radar\" -->\n  | Animal          | weight in kg | Lifespan years | Mitogen |\n  | --------------- | ------------:| --------------:| -------:|\n  | Mouse           |        0.028 |             02 |      95 |\n  | Flying squirrel |        0.085 |             15 |      50 |\n  | Brown bat       |        0.020 |             30 |      10 |",
        "prefix": "lia-table-diagram-radar"
    },
    "<!-- data-type=\"sankey\" -->": {
        "body": "<!-- data-type=\"sankey\" -->",
        "description": "A Sankey diagram is a special type of directed graph that can be used to streams or the flow of something, such as engergy, money, etc.\n\nExample:\n  <!-- data-type=\"sankey\" -->\n  | Sankey |  A  |  B  |  C  |  D  |  E  |\n  |:------ |:---:|:---:|:---:|:---:|:---:|\n  | A      |     |  2  |     |     |     |\n  | B      |  3  |     |     |     |     |\n  | C      |  1  |  1  |     |     |     |\n  | D      |     |  1  |  1  |     |     |\n  | E      |  2  |  1  |  1  |  1  |     |",
        "prefix": "lia-table-diagram-sankey"
    },
    "<!-- data-type=\"scatterplot\" -->": {
        "body": "<!-- data-type=\"scatterplot\" -->",
        "description": "If the first column contains repetitive numbers, scatterplots are used as the default representation if further numbers are determine, a special tag is not required.\n\nExample:\n  <!-- data-type=\"scatterplot\" -->\n  | x's |  some y's  |                              dist |\n  | --- |:----------:| ---------------------------------:|\n  | 1   |    1 $    |                           16 $km$ |\n  | 2.2 |    2 $    |                           12 $km$ |\n  | 3.3 |    5 $    |                            1 $km$ |\n  | 4   | -12.333 $ | -555$km$ <-- this will be ignored |\n  | 4   |            |                                 1 |",
        "prefix": "lia-table-diagram-scatterplot"
    },
    "<!-- data-xlabel=\"...\" -->": {
        "body": "<!-- data-xlabel=\"${1:title}\" -->",
        "description": "You can overwrite the diagram x-label for your plotted document via the data-xlabel parameter, this is only visible if you switch to the diagram mode.\n\nExample:\n  <!--\n  data-title=\"Government expenditure on education\"\n  data-xlabel=\"year\"\n  data-ylabel=\"% of GDP\"\n  -->\n  | Year | Finland | USA | Germany |   China |\n  | ---- | -------:| ---:| -------:| -------:|\n  | 1995 | 6.80942 |     | 4.42079 | 1.84192 |\n  | 1996 | 6.86052 |     | 4.48319 | 1.85338 |\n  | ...  |     ... | ... |     ... |     ... |",
        "prefix": "lia-table-diagram-xlabel"
    },
    "<!-- data-ylabel=\"...\" -->": {
        "body": "<!-- data-ylabel=\"${1:title}\" -->",
        "description": "You can overwrite the diagram y-label for your plotted document via the data-ylabel parameter, this is only visible if you switch to the diagram mode.\n\nExample:\n  <!--\n  data-title=\"Government expenditure on education\"\n  data-xlabel=\"year\"\n  data-ylabel=\"% of GDP\"\n  -->\n  | Year | Finland | USA | Germany |   China |\n  | ---- | -------:| ---:| -------:| -------:|\n  | 1995 | 6.80942 |     | 4.42079 | 1.84192 |\n  | 1996 | 6.86052 |     | 4.48319 | 1.85338 |\n  | ...  |     ... | ... |     ... |     ... |",
        "prefix": "lia-table-diagram-ylabel"
    },
    "<!-- name: ...": {
        "body": "<!--\nauthor:   ${1:Your Name}\nemail:    ${2:your@email.com}\nversion:  ${3:0.1.0}\nlanguage: ${4:en}\nnarrator: ${5:US English Female}\n\ncomment:  ${6:This simple description of your course.\n          Multiline is also okay.}\n\nlink:     ${7:https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css}\n\nscript:   ${8:https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js}\n\n${9:translation: Français translations/French.md}\n-->",
        "description": "  The main header is a comment of the following format. You can use it to define defaults, such as authors, emails, where to find translations, what JavaScript and styles should be loaded additionally, as well as the language of your course.\n  You can change some of these settings within a sub-header for each section individually.\n\n  Default:\n      language: (en) | de | ua | fa | hy | bg\n      narrator: US English Male\n\n  Example:\n\n      <!--\n      author:   Your Name\n      email:    your@email.com\n      version:  0.1.0\n      language: en\n      narrator: US English Female\n\n      comment:  This simple description of your course.\n                Multiline is also okay.\n\n      link:     https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\n                https://...\n\n      script:   https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js\n                https://...\n\n      translation: Français translations/French.md\n      translation: 日本語    translations/Japanese.md\n      -->\n\n      # Course ...\n\nAnd you can refer to these values via the system macros:\n\n    @author\n    @email\n    @version",
        "prefix": "lia-header-main"
    },
    "<!-- name: ... -->": {
        "body": "<!--\nauthor:   ${1:Section Author}\nemail:    ${2:section.author@email.com}\nversion:  ${3:0.1.0}\nnarrator: ${4:UK English Female}\n\nlink:     ${5:https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css}\n\nscript:   ${6:https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js}\n-->",
        "description": "You can overwrite some main header settings as it is listed below. Just attach a comment to the section title and overwrite only those settings, that are relevant to you.\n\nExample:\n\n    ...\n    # Course\n    ...\n    ## Section\n    <!--\n    narrator: Australian Female\n    -->\n    ...\n    ### Sub Section\n    <!--\n    author:   Section Author\n    email:    section.author@email.com\n    version:  0.1.0\n    narrator: Australian Female\n\n    link:     https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\n    script:   https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js\n    -->",
        "prefix": "lia-header-section"
    },
    "<!-- style ... --> ```` /--=... `````": {
        "body": "<!-- style=\"display: block; margin-left: auto; margin-right: auto; max-width: 315px;\" -->\n``````````````````````````````````````````````````\n${1:                             .--->  F\n    A       B     C   D     /\n    *-------*-----*---*----*----->  E\n                         ^ v          /   '--->  G\n               B --> C -'}\n``````````````````````````````````````````````````",
        "description": "Add styling to your ASCII art drawings, sketches. Set the maximum size or center it.\n\nExamples:\n\n  <!-- style=\"display: block; margin-left: auto; margin-right: auto; max-width: 315px;\" -->\n  ``````````````````````````````````````````````````\n  ${1:                             .--->  F\n      A       B     C   D     /\n      *-------*-----*---*----*----->  E\n                           ^ v          /   '--->  G\n                 B --> C -'}\n  ``````````````````````````````````````````````````",
        "prefix": "lia-ascii-example-css"
    },
    "<details><summary>...": {
        "body": "<details>\n\n<summary>${1:title}</summary>\n\n${2:body}\n\n</details>",
        "description": "The details and summary tags are standard HTML tags and GitHub also supports their usage with Markdown. These tags offer a neat way to define something what is nowadays called accordion. Thus, your user can click on the summary text to make the body of the details-tag appear.\n\nExample:\n  <details>\n\n  <summary>**Honest Textbook ads (click to enlarge)**</summary>\n\n  !?[If High School and College Textbooks Were Honest - Honest Ads](https://www.youtube.com/watch?v=lhSjYT7pWkw)\n\n  </details>",
        "prefix": "lia-details"
    },
    "<script> /* quiz */ </script>": {
        "body": "<script>\n  ${1:// @input gets replaced by the current quiz input.\n  // In case of a:\n  // * text input -> string, that has to be encapsulated with (\")\n  // * single choice -> int (-1, if nothing is selected)\n  // * multiple choice -> array int (0 unchecked, 1 checked)\n  let input = @input;\n\n  true; // if solved otherwise return false}\n</script>",
        "description": "This will insert a generic script tag in the following form, the @input will be replaced according the current context:\n\n<script>\n  // @input gets replaced by the current quiz input.\n  // In case of a:\n  // * text input -> string, that has to be encapsulated with (\")\n  // * single choice -> int (-1, if nothing is selected)\n  // * multiple choice -> array int (0 unchecked, 1 checked)\n  let input = @input;\n\n  true; // if solved otherwise return false\n</script>",
        "prefix": "lia-quiz-js"
    },
    "<script> /*single choice*/ </script>": {
        "body": "<script>\n  // @input gets replaced by a single number\n  // -1 if no selection otherwise it starts\n  // with 0.\n  let input_number = @input;\n\n  ${1:if(input_number == 1)\n    true;\n  else\n    false;}\n</script>",
        "description": "In some rare cases you might want to change the correct solution, or add a counter, that reveals the correct answer after some predefined number of trials. Then simply add a script tag to the quiz. The @input string gets replaced by an integer representing the current user input:\n\n-1 -> no selection\n0  -> the first\n1  -> the second\n\nExample:\n\n    [( )] Check this ...\n    [(X)] ... and not this\n    <script>\n      // @input gets replaced by a single number\n      // -1 if no selection otherwise it starts\n      // with 0.\n      let input_number = @input;\n\n      ${7:if(input_number == 0)\n        true;\n      else\n        false;}\n    </script>",
        "prefix": "lia-quiz-single-js"
    },
    "<script> /*single multiple*/ </script>": {
        "body": "<script>\n  // @input gets replaced by an array in the\n  // form of [0,0,0,1], whereby 0 and 1\n  // define whether a checkbox is checked\n  // or not...\n  let input_array = @input;\n  ${1:input_array = JSON.stringify(input_array);\n\n  if      (input_array == \"[0,1,0,1]\")  true;\n  else if (input_array == \"[0,1,0,0]\")  true;\n  else if (input_array == \"[0,0,0,1]\")  true;\n  else                                 false;}\n</script>",
        "description": "In some rare cases you might want to change the correct solution, add a counter, or let some correct answers pass. Then simply add a script tag to the quiz. The @input string here gets replaced by an by an array of integers ([0,1,1,0]) that represent the current user input:\n\n0 -> stands for checked\n1 -> represents an unchecked field\n\nExample:\n\n  Get at least one right ...\n\n  [[ ]] Wrong.\n  [[X]] Right.\n  [[ ]] Wrong.\n  [[X]] Right.\n  <script>\n    // @input gets replaced by an array in the\n    // form of [0,0,0,1], whereby 0 and 1\n    // define whether a checkbox is checked\n    // or not...\n    let input_array = @input;\n    input_array = JSON.stringify(input_array);\n\n    if      (input_array == \"[0,1,0,1]\")  true;\n    else if (input_array == \"[0,1,0,0]\")  true;\n    else if (input_array == \"[0,0,0,1]\")  true;\n    else                                 false;\n  </script>",
        "prefix": "lia-quiz-multiple-js"
    },
    "<script>...@input...</script>": {
        "body": "<script>\n  try{\n    eval(`@input`);\n  } catch (e) {\n    var log = e.stack.match(/((.*?):(.*))\\\\n.*?(:(\\\\d+):(\\\\d+)\\\\)\\\\n)/);\n    var err_msg = new LiaError(log[1] + \" =>  (\" + log[4], 1);\n    err_msg.add_detail(0, log[3], \"error\", log[5]-1, log[6]);\n    throw err_msg;\n  }\n</script>",
        "description": "This is an extended executable version of a code block, it shows how errors can be extracted and fed back by using LiaError to show inline errors, warnings, or information.\nIf you are using a project and want to integrate more than one file into your execution, you will have to use the parameterized @input(int) macro, the integer is defined by the file order (@input defaults to 0).\n\nExample:\n\n  <script>\n    try{\n      eval(`@input`); // code to be evaluated\n    } catch (e) {\n      // do some pattern matching to get the error string, the line number and column\n      var log = e.stack.match(/((.*?):(.*))\\n.*?(:(\\d+):(\\d+)\\)\\n)/);\n\n      // create a new LiaError object with\n      // param1: an error message string\n      // param2: add the number of files involved as int\n      var err_msg = new LiaError(log[1] + \" =>  (\" + log[4], 1);\n\n      // add as many information to your error message\n      // param1: file id\n      // param2: additional information string\n      // param3: type, either \"error\", \"info\", or \"warning\"\n      // param4: line number\n      // param5: column number\n      err_msg.add_detail(0, log[3], \"error\", log[5]-1, log[6]);\n\n      throw err_msg;   // finally just throw it away\n    }\n  </script>",
        "prefix": "lia-code-js"
    },
    "> ...": {
        "body": "> ${1:your quote}",
        "description": "Insert single line quotes or quote blocks just with the help of a starting (>).\n\nExample:\n  > Block-quotes are very handy in email to emulate reply text.\n  > This line is part of the same quote.\n\n  Quote break.\n\n  > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a block-quote.",
        "prefix": "lia-quote"
    },
    "> ... -- citation": {
        "body": "> ${1:your quote}\n>\n> -- ${2:your citation}",
        "description": "Insert single line quotes or quote blocks just with the help of a starting (>) and let the final paragraph start with -- to indicate an blockquote citation.\n\nExample:\n  > “Live as if you were to die tomorrow.\n  > Learn as if you were to live forever.”\n  >\n  > -- Mahatma Gandhi",
        "prefix": "lia-quote-citation"
    },
    "??[alt-text](url)": {
        "body": "??[${1:alt-text}](${2:url})",
        "description": "Embed anything by using two question marks. LiaScript will try to determine if it is possible to use oEmbed for this site, if not, the content will be embedded as an `<iframe>`.\n\nExample:\n\n  ??[circuit simulator](https://falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWcDoBYDsAmdA2dBOdMMADhzEnxASQusmoFMBaYgKACcQBmTB7yKh58eCTFHCQ2Ac2H8xcniSEMpAJRCYEOTSRKbI+zHokNUDTNCSqoVtgHdF2cbwuYVDp+5CowOzN5Sjq7gxj5+ofrqimBhISQ2Zgx0iXYAxjFxIgEqtvCC+IVFxSU6+ND43CRiejjcOJUkEDBwYJzhOrH6vv6BkvCeIV2aWJFQg9nezpqBbADOI+LD0zkSEAAuHACujGwAZprauvohxlHgVnmYbAD2IPrDSfgPqrBw6E1aEuInbEA)\n\n  ??[Pottery Jar 3D model](https://sketchfab.com/3d-models/pottery-jar-0576d43d28924c948ed3bbae02e4e0cb)",
        "prefix": "lia-embed"
    },
    "?[alt-text](audio-url \"info\")": {
        "body": "?[${1:alt-text}](${2:audio-url} \"${3:info}\")",
        "description": "An optional information can be attached to every audio file by adding double quotes after the link in the parentheses. This will be attached as a subtitle to this element and can also include Markdown syntax.\n\nExample:\n\n  ?[singing birds](https://bigsoundbank.com/UPLOAD/mp3/1068.mp3 \"optional infos\")",
        "prefix": "lia-audio-info"
    },
    "?[alt-text](audio-url)": {
        "body": "?[${1:alt-text}](${2:audio-url})",
        "description": "Including audio is done with a starting question mark (?) that is followed a common Markdown link. If you want to include soundcloud, then you only have to refer to the link and the player gets embedded into your course.\n\nExample:\n\n  ?[singing birds](https://bigsoundbank.com/UPLOAD/mp3/1068.mp3)\n\n  ?[soundcloud](https://soundcloud.com/glennmorrison/beethoven-moonlight-sonata)",
        "prefix": "lia-audio"
    },
    "@author": {
        "body": "@author",
        "description": "Gets replaced by the author defined in the header.",
        "prefix": "lia-macro-author"
    },
    "@date": {
        "body": "@date",
        "description": "Gets replaced by the date defined in the header.",
        "prefix": "lia-macro-date"
    },
    "@email": {
        "body": "@email",
        "description": "Gets replaced by the email defined in the header.",
        "prefix": "lia-macro-email"
    },
    "@input": {
        "body": "@input",
        "description": "Use this only in conjunction with executable code and projects or with quizzes. This macro can only be used in a script tag and gets replaced by the current user input.\nTo refer to the inputs in a project, use the parameterized macro:\n\n  @input(0)   <== equal to @input\n  @input(1)",
        "prefix": "lia-macro-input"
    },
    "@name ... body ... @end": {
        "body": "@${1:name}\n${2:param1 -> __@0__}\n@end",
        "description": "Use macros to deal with repetitive task and to make the document more readable. Multi-line macros start with an (@your_name) and end with (@end). Parameters can also be passed as to single line macros.\n\nExample:\n\n  ## section\n  <!--\n  @evalJS\n  <script>\n    try{\n      eval(`@input`);\n    } catch (e) {\n      var log = e.stack.match(/((.*?):(.*))\n.*?(:(d+):(d+))\n)/);\n      var err_msg = new LiaError(log[1] + \" =>  (\" + log[4], 1);\n      err_msg.add_detail(0, log[3], \"error\", log[5]-1, log[6]);\n      throw err_msg;\n    }\n  </script>\n  @end\n  -->\n\n  eval this code with erros:\n\n  ```js\n  let x = 12;\n  x * c;\n  ```\n  @evalJS",
        "prefix": "lia-macro-definition-block"
    },
    "@name: one line": {
        "body": "@${1:name}: ${2:line}",
        "description": "Use macros to deal with repetitive task and to make the document more readable. You can define your own macros within the main and section headers. Start your macro with an (@) sign and give it a name. Separate the name from the body with a colon (:). If you want to parameterize your macro, use @0, @1, ... for the parameter id. It is a simple string substitution mechanism, and the parameters are separated by a comma (,). If you have commas in your parameters, then use back-tics (`) to enclose this parameter. And triple back-tics (```) to enclose multi-line parameters.\n\nExample:\n\n  ## section\n  <!--\n  @red: <!-- style=\"color: red;\" -->\n\n  @bold_italic: __@0__ _@1_\n  -->\n\n  @red\n  This whole paragraph will be read and this will be:\n  @bold_italic(I am Bold,`I am Italic,, I am too`).",
        "prefix": "lia-macro-definition-line"
    },
    "@persistent": {
        "body": "persistent: ${1:false}",
        "description": "If you do not want to store the course state wihin indexeddb and also not within the local course index, you can use this macro within the header, which means that no trace of this course will be stored locally.\n\nExample:\n  <!--\n  persistent: false\n  -->",
        "prefix": "lia-macro-persistent"
    },
    "@section": {
        "body": "@section",
        "description": "Gets replaced by the current section number.",
        "prefix": "lia-macro-section"
    },
    "@uid": {
        "body": "@uid",
        "description": "Generates a UID that can be used to name tags uniquely.",
        "prefix": "lia-macro-uid"
    },
    "@version": {
        "body": "@version",
        "description": "Gets replaced by the version defined in the header.",
        "prefix": "lia-macro-version"
    },
    "[( |X)] text": {
        "body": "[(${1: })] ${2:enter your text}",
        "description": "Compose your single choice quizzes out of many lines in the following format:\n\nExample:\n  This is a single choice quiz with three options:\n\n    [( )] Add as many lines as you want?\n    [(X)] The X marks the only correct answer!\n    [( )] ... And only one X is allowed.\n\n(If you want, you can also have multiple correct options.)",
        "prefix": "lia-quiz-single-choice"
    },
    "[(1)(2)(0)]": {
        "body": "[(${1:0})(${2:1})(${3:2})]\n[         ] ${4:text}\n[         ] ${5:text}\n[         ] ${6:text}",
        "description": "A list of single choice surveys can be defined as depicted below. Either numbers have to be put into parentheses or variable. They do not have to be ordered and the number is also variable.\n\nExample:\n\n  Give marks:\n\n      [(-1)(0)(1)]\n      [          ] LiaScript is great?\n      [          ] I would use it to make online **courses**?\n      [          ] I would use it for online **surveys**?\n\n  What is your opinion:\n\n      [(agree)(unsure)(maybe not so)]\n      [                             ] LiaScript is great?\n      [                             ] I would use it to make online **courses**?\n      [                             ] I would use it for online **surveys**?",
        "prefix": "lia-survey-single-choice-matrix"
    },
    "[(1)]...[(:...)]...": {
        "body": "[(${1:1})] ${2:option 1}\n[(${3:2})] ${4:option 2}\n[(${5:3})] ${6:option 3}",
        "description": "The definition is similar to a single choice quiz, but instead of an X, either numbers have to be put into parentheses or variable names. They do not have to be ordered and the number is also variable.\n\nExample:\n\n  Choose between different options:\n\n    [(1)] option 1\n    [(2)] option 2\n    [(0)] option 3\n\n  What is your favorite color:\n\n    [(red)]   red?\n    [(blue)]  blue?\n    [(green)] green?",
        "prefix": "lia-survey-single-choice"
    },
    "[[ |X][ |X]...] text": {
        "body": "[[${1: }] [${2: }] [${3: }]]\n[[${4: }] [${5: }] [${6: }]] ${7: add a line}\n[(${8: }) (${9: }) (${10: })] ${11: add a line}",
        "description": "Compose a matrix of quizzes with multiple SingleChoice and MultipleChoice quizzes per row. The column headers have to be put into brackets or parentheses, depending on your passed Markdown content. It is allowed to have different numbers of options per row.\n\nExample:\n  This is a multiple choice quiz with four options:\n    [[:-)] (:-]) (_bold_)]\n    [ [ ]   [ ]     [X]  ] Only the X marks the correct solution!\n    [ [X]   [ ]     [ ]  ] Multiple- and SingleChoice quizzes in a matrix,\n    [ ( )   ( )     (X)  ] but you have to be consitent per row.\n    [ ( )   ( )     ( )   ( ) ] More or less options than defined in the header are also allowed.",
        "prefix": "lia-quiz-matrix-choice"
    },
    "[[ |X]] text": {
        "body": "[[${1: }]] ${2:enter your text}",
        "description": "Compose your multiple choice quizzes out of many lines in the following format:\n\nExample:\n  This is a multiple choice quiz with four options:\n\n    [[ ]] Add as many lines as you want?\n    [[X]] The X marks the correct lines that have to be selected!\n    [[X]] This can offer multiple options that have to be clicked.\n    [[ ]] But it can also consist of empty brackets either.",
        "prefix": "lia-quiz-multiple-choice"
    },
    "[[!]] <script> ... </script>": {
        "body": "[[!]]\n<script>\n  ${1:// you are free to check anything you want\n  true;}\n</script>",
        "description": "In some rarely rarely rare cases, you might want to have something completely different and analyze some other HTML or code inputs (unit testing). In this case you can apply this generic tag and do in JavaScript whatever you want. The this quiz is solved if the script gets evaluated to true, not solved by resulting in false (everything else is ignored).\n\n*Click Me!*<!-- onclick=\"window['rand'] = Math.random();\" -->\n\n[[!]]\n<script>\n  alert(\"your value random value is:\", window['rand']);\n  if(window['rand'] > 0.8)\n    true;\n  else\n    false\n</script>",
        "prefix": "lia-quiz-generic-js"
    },
    "[[1][2][0]]": {
        "body": "[[${1:0}][${2:1}][${3:2}]]\n[         ] ${4:text}\n[         ] ${5:text}\n[         ] ${6:text}",
        "description": "A list of multiple choice surveys can be defined as depicted below. Either numbers have to be put into parentheses or variable names. They do not have to be ordered and the number is also variable.\n\nExample:\n\n  Give marks:\n\n      [[-1][0][1]]\n      [          ] LiaScript is great?\n      [          ] I would use it to make online **courses**?\n      [          ] I would use it for online **surveys**?\n\n  What is your opinion:\n\n      [[agree][unsure][maybe not so]]\n      [                             ] LiaScript is great?\n      [                             ] I would use it to make online **courses**?\n      [                             ] I would use it for online **surveys**?",
        "prefix": "lia-survey-multiple-choice-matrix"
    },
    "[[1]]...[[:...]]...": {
        "body": "[[${1:1}]] ${2:option 1}\n[[${3:2}]] ${4:option 2}\n[[${5:3}]] ${6:option 3}",
        "description": "The definition is similar to a multiple choice quiz, but instead of an X, either numbers have to be put into parentheses or variable names. They do not have to be ordered and the number is also variable.\n\nExample:\n\n  Choose as many options as your want:\n\n    [[1]] option 1\n    [[2]] option 2\n    [[0]] option 0\n\n  Mark all colors you like:\n\n    [[red]]   red?\n    [[blue]]  blue?\n    [[green]] green?\n    [[none]]  None of these ...",
        "prefix": "lia-survey-multiple-choice"
    },
    "[[?]] hint": {
        "body": "[[?]] ${1:enter your hint}",
        "description": "If a quiz might be a bit tricky, you can add hints directly after any type of quiz and as many hints as you want. The user can decide whether he or she wants to use it, simply by clicking on the additional question mark, that appears after the check button.\n\nExample:\n  This is a text quiz with two hints:\n\n    [[solution]]\n    [[?]] This is the first hint\n    [[?]] This is a second hint\n\n  And a multiple choice quiz with one hint:\n\n    [[X]] This is correct!\n    [[ ]] This is wrong!\n    [[?]] Click on the first option!",
        "prefix": "lia-quiz-hint"
    },
    "[[___ ___]]": {
        "body": "[[___ ___]]",
        "description": "Surveys are defined similarly to quizzes by using brackets ([]). A text survey is defined by a multiple number three subsequent underscores (___) that are enclosed by double brackets. The number of underscores defines the number of lines a user has to fill out.\n\nExample:\n\n  A single line text survey:\n\n    [[___]]\n\n  A two line text survey:\n\n    [[___ ___]]\n\n  And a six liner:\n\n    [[___ ___ ___ ___ ___ ___ ]]",
        "prefix": "lia-survey-text"
    },
    "[[select|_wrong_|(right)]]": {
        "body": "[[${1:option}|${2:option}]]",
        "description": "Create a selection field, that contains various different solutions, separated by `|`. Images, formulas everything is allowed, only the correct solution has to be put into parentheses and there can be multiple correct solutions.\n\nExample:\n  What is the color of the sky?\n\n  [[ red | (__blue__) | green | (black at night)]]",
        "prefix": "lia-quiz-select"
    },
    "[[solution]]": {
        "body": "[[${1:solution}]]",
        "description": "Simply encompass your solution word into double brackets and you will get a nicely rendered text quiz.\n\nExample:\n  What is the color of the sky?\n\n  [[blue]]",
        "prefix": "lia-quiz-text"
    },
    "[[solution]]<script> ... </script>": {
        "body": "[[${1:solution}]]\n<script>\n  ${2:// @input will be replace by the user input\n  let input_string = \"@input\";\n  \"solution\" == input_string.trim().toLowerCase();}\n</script>",
        "description": "If different inputs are possible, you can add a script tag to your quiz-field. The reference @input will be replaced by the current user input string, and the result of the script has to be true or false.\n\nExample:\n  What is the color of the sky?\n\n  [[blue]]\n  <script>\n    let input_string = \"@input\";\n    \"BLUE\" == input_string.trim().toUpperCase();\n  </script>",
        "prefix": "lia-quiz-text-js"
    },
    "[^ref]": {
        "body": "[^${1:ref}]",
        "description": "Multiline footnotes have to be split into a reference and into a comment. Footnote references are defined by brackets with a starting caret and can appear everywhere within the text. Footnote texts have to be put into the end of each section.\n\nExample:\n\nHere is a footnote reference, [^1] and another.[^longnote]\n\n...\n\n[^1]: Here is the footnote text.\n\n[^longnote]: Here's one with multiple blocks.\n\n               Subsequent paragraphs are indented to show that they\n               belong to the previous footnote.",
        "prefix": "lia-footnote-reference"
    },
    "[^ref](text)": {
        "body": "[^${1:ref}](${2:explanation})",
        "description": "Inline Footnotes are composed of a reference in brackets with a starting caret. The following text has to be put into parentheses, only one line is allowed.\n\n   Example with [^1](inline _footnote_) and some more text.",
        "prefix": "lia-footnote-inline"
    },
    "[^ref]: some comments ...": {
        "body": "[^${1:ref}]: ${2:some comments}",
        "description": "Multiline footnotes have to be split into a reference and into a comment. Footnote texts start with a reference \"tag\", which is followed by a colon. They have to be put into the end of each section otherwise they are not interpreted as footnote texts and multi-block footnotes have to follow the previous indentation.\nExample:\n...\n\n[^1]: Here is the footnote text.\n\n[^longnote]: Here's one with multiple blocks.\n\n               Subsequent paragraphs are indented to show that they\n               belong to the previous footnote.",
        "prefix": "lia-footnote-text"
    },
    "[name](url \"info\")": {
        "body": "[${1:name}](${2:url} \"${3:info}\")",
        "description": "An optional information can be attached to every link by adding double quotes after the link in the parentheses.\n\nExamples:\n  [LiaScript](https://liascript.github.io \"click Me\")\n\n  Local navigation:\n    [top](#1 \"by slide number\")\n    [top](#and-the-title-is \"by slide title\")",
        "prefix": "lia-link-info"
    },
    "[name](url)": {
        "body": "[${1:name}](${2:url})",
        "description": "Links can be added in many ways to a document (relative or absolute), either in common Markdown style by enclosed brackets ([]) and parentheses (()), or directly if it starts with http or www and matches the common url pattern.\nIf you want to navigate within the current document, use hash tag and the number of the slide.\nAnd you can add additional html and css options by adding a trailing comment.\n\nExamples:\n  [LiaScript](https://liascript.github.io)\n\n  Also an accepted link: https://liascript.github.io\n\n  Local navigation by slide number: [top](#1)\n\n  Local navigation by slide title: [top](#some-title)\n\n  With styling [LiaScript](https://liascript.github.io)<!--\n    title = \"click me\"\n    style = \"color: red;\"\n  -->",
        "prefix": "lia-link"
    },
    "^text^": {
        "body": "^${1:superscript}^",
        "prefix": "lia-text-superscript"
    },
    "___text___": {
        "body": "___${1:italic bold}___",
        "prefix": "lia-text-italic-bold"
    },
    "__text__": {
        "body": "__${1:bold}__",
        "prefix": "lia-text-bold"
    },
    "_text_": {
        "body": "_${1:italic}_",
        "prefix": "lia-text-italic"
    },
    "``` ... ``` ``` ... ``` ...": {
        "body": "``` ${1:js}     ${2:-EvalScript.js}\n${3:let who = data.first_name + \" \" + data.last_name;\n\nif(data.online) {\n  who + \" is online\"; \\}\nelse {\n  who + \" is NOT online\"; \\}}\n```\n``` ${4:json}    ${5:+Data.json}\n${6:{\n  \"first_name\" :  \"Sammy\",\n  \"last_name\"  :  \"Shark\",\n  \"online\"     :  true\n\\}}\n```\n<script>\n  ${7:// insert the JSON dataset into the local variable data\n  let data = @input(1);\n\n  // eval the script that uses this dataset\n  eval(`@input(0)`);}\n</script>",
        "description": "If you want to create a project and thus separate data and code into multiple files, simply write multiple code blocks in a sequence. To make them executable as a whole, simply add a script tag to the end and use the parameterized @input(id) macro to compose your project properly. The file id is defined by the order of code blocks.\nSee the link below to see more examples.\n\nExample:\n\n  ``` js     -EvalScript.js\n  let who = data.first_name + \" \" + data.last_name;\n\n  if(data.online) { who + \" is online\"; }\n  else            { who + \" is NOT online\"; }\n  ```\n  ``` json    +Data.json\n  { \"first_name\" :  \"Sammy\",\n    \"last_name\"  :  \"Shark\",\n    \"online\"     :  true   }\n  ```\n  <script>\n    // insert the JSON dataset into the local variable data\n    let data = @input(1);\n\n    // eval the script that uses this dataset\n    eval(`@input(0)`);\n  </script>",
        "prefix": "lia-code-project"
    },
    "``` @[macro](url-param) ```": {
        "body": "@[${1:macro}](${2:url-param})",
        "description": "This type of macro-call comes handy, if you want to refere to a certain URL and want other Markdown readers to show this information as a link. It is also possible to add additional parameters within parentheses, whereby the URL is always used as the last parameter.\n\nExample:\n\n  @[doSomethingWith](URL)\n\n  @[doSomethingWith(1,2,3)](URL \"this will be ignored by now\")",
        "prefix": "lia-macro-call-link"
    },
    "``` @macro ```": {
        "body": "```${1:lang} @${2:macro}\n${3:a multiline\nparameter}\n```",
        "description": "If you have a more complex multi-line macro definition, you can also use the following style so that it gets rendered at least in a readable manner by Github for example. Thus, you can place your macro call into into the code-block header, the first (optional) language parameter gets ignored and, whereby the following elements within the block are passed as the last multi-line parameter to that call.\n\nExample:\n\n    ## Macro\n    <!--\n    link:   https://pannellum.org/css/style.css\n            https://cdn.pannellum.org/2.4/pannellum.css\n\n    script: https://cdn.pannellum.org/2.4/pannellum.js\n\n    @panorama\n    <div id=\"panorama_@0\" style=\"width: 100%; height: 400px;\"></div>\n    <script>\n    pannellum.viewer('panorama_@0', {\n        \"type\": \"equirectangular\",\n        \"panorama\": \"@1\",\n        \"autoLoad\": false,\n        \"hotSpots\": [@2]\n    });\n    </script>\n    @end\n    -->\n\n    ```json @panorama(\"0\",https://pannellum.org/images/cerro-toco-0.jpg)\n    {\n        \"pitch\": 14.1,\n        \"yaw\": 1.5,\n        \"type\": \"info\",\n        \"text\": \"Baltimore Museum of Art\",\n        \"URL\": \"https://artbma.org/\"\n    },\n    {\n        \"pitch\": -0.9,\n        \"yaw\": 144.4,\n        \"type\": \"info\",\n        \"text\": \"North Charles Street\"\n    }\n    ```",
        "prefix": "lia-macro-call-block"
    },
    "````` /--=... `````": {
        "body": "``````````````````````````````````````````````````\n${1:                             .--->  F\n    A       B     C   D     /\n    *-------*-----*---*----*----->  E\n                         ^ v          /   '--->  G\n               B --> C -'}\n``````````````````````````````````````````````````",
        "description": "Add ASCII art drawings, sketches, or what ever you want, simply by enclosing it with at least four back tics (````).\n\nExamples:\n\n  `````````````````````````````````\n                           .--->  F\n  A       B     C   D     /\n  *-------*-----*---*----*----->  E\n                       ^ v          /   '--->  G\n             B --> C -'\n  `````````````````````````````````",
        "prefix": "lia-ascii-example"
    },
    "```lang +name ...```": {
        "body": "```${1:javascript} ${2:title.js}\n${3:var s = \"Named JavaScript syntax highlighting\";\nalert(s);}\n```",
        "description": "You can name your snippets by adding just after the language code. At default, it will be visible, but by adding a plus (+) in front of your filename you can make this more expressible, whereby a minus (-) will hide it at first. In this way you can also group multiple files into a (executable) project.\n\nExamples:\n\n  ```javascript    Visible.js\n  alert(\"Visble JavaScript file\";);\n  ```\n\n  ```javascript   +Visible.js\n  alert(\"Also visible JavaScript file\");\n  ```\n\n  ```javascript   -Hidden.js\n  alert(\"Hidden JavaScript file on init\");\n  ```",
        "prefix": "lia-code-block-name"
    },
    "```lang +name ...``` <script>@input</script>": {
        "body": "```${1:javascript}   ${2:Filename.js}\n${3:var s = \"Named JavaScript syntax highlighting\";\nalert(s);\ns;}\n```\n<script>${4:@input}</script>",
        "description": "To insert a named and executable and code snippet. The macro @input is replaced with the current user input and gets evaluated in a try and catch block. Using JavaScript you can also insert interpreters to other languages or access them. In these cases you will have to change the content of the <script> tag. To get an impression about the possibilities, click on the link below.\nThe result of the script or the error are passed to a command-line like output beneath the code-block.\n\nExample:\n\n  ```javascript   +Tile.js\n  var s = \"Visible JavaScript syntax highlighting\";\n  ```\n  <script>@input</script>\n\n  ```javascript   +Title.js\n  var s = \"Hidden JavaScript syntax highlighting\";\n  ```\n  <script>@input</script>",
        "prefix": "lia-code-block-name-js"
    },
    "```lang ... ```": {
        "body": "```${1:javascript}\n${2:var s = \"JavaScript syntax highlighting\";\nalert(s);}\n```",
        "description": "To insert a code block with syntax highlight, enclose your code snippet with three back-ticks (```) that is followed by a language code. To search all language codes, visit the link below, but in most cases you can simply add either the name of the language or the typical file-ending.\n\nExamples:\n\n  ```javascript\n  var s = \"JavaScript syntax highlighting\";\n  alert(s);\n  s;\n  ```\n\n  ```python\n  s = \"Python syntax highlighting\"\n  print s\n  ```\n\n  ```\n  No language indicated, so no syntax highlighting.\n  But let's throw in a <b>tag</b>.\n  ```",
        "prefix": "lia-code-block"
    },
    "```lang ... ``` <script> ... ": {
        "body": "```${1:javascript}\n${2:var s = \"JavaScript syntax highlighting\";\nalert(s);}\n```\n<script>\n  try{\n    eval(`@input`);\n  } catch (e) {\n    var log = e.stack.match(/((.*?):(.*))\\\\n.*?(:(\\\\d+):(\\\\d+)\\\\)\\\\n)/);\n    var err_msg = new LiaError(log[1] + \" =>  (\" + log[4], 1);\n    err_msg.add_detail(0, log[3], \"error\", log[5]-1, log[6]);\n    throw err_msg;\n  }\n</script>",
        "description": "This is an extended executable version of a code block, it shows how errors can be extracted and fed back by using LiaError to show inline errors, warnings, or information.\nIf you are using a project and want to integrate more than one file into your execution, you will have to use the parameterized @input(int) macro, the integer is defined by the file order (@input defaults to 0).\n\nExample:\n\n  ```javascript\n  var s = \"JavaScript syntax highlighting\";\n  alert(s);\n  ```\n  <script>\n    try{\n      eval(`@input`);  // <== code to evaluate\n    } catch (e) {\n      var log = e.stack.match(/((.*?):(.*))\\n.*?(:(\\d+):(\\d+)\\)\\n)/);\n      var err_msg = new LiaError(log[1] + \" =>  (\" + log[4], 1);\n      err_msg.add_detail(0, log[3], \"error\", log[5]-1, log[6]);\n      throw err_msg;\n    }\n  </script>",
        "prefix": "lia-code-block-jsx"
    },
    "```lang ... ``` <script>@input</script>": {
        "body": "```${1:javascript}\n${2:var s = \"JavaScript syntax highlighting\";\nalert(s);\ns;}\n```\n<script>${3:@input}</script>",
        "description": "To insert an executable and editable code block with syntax highlight, insert a common Markdown code block with a succeeding <script> tag. The macro @input is replaced with the current user input and gets evaluated in a try and catch block. Using JavaScript you can also insert interpreters to other languages or access them. In these cases you will have to change the content of the script tag. To get an impression about the possibilities, click on the link below.\nThe result of the script or the error are passed to a command-line like output beneath the code-block.\n\nExample:\n\n  ```javascript\n  var s = \"JavaScript syntax highlighting\";\n  alert(s);\n  ```\n  <script>@input</script>",
        "prefix": "lia-code-block-js"
    },
    "```lang @ouput ...```": {
        "body": "``` ${1:text}     ${2:+@output}\n${3:Enter your default output}\n```",
        "description": "In contrast to the @input macro, there is also an @output macro, which can be used to define the initial output of and executable code-block. This block has to be the last and you can use a plus (+) or a minus (-) in front to indicate, whether this output is interpreted as normal stdout or stderr.\n\nExample:\n\n  ``` js     -EvalScript.js\n  let str = \"hello world\";\n\n  consolelog(str)\n  ```\n  ``` json    -@ouput\n  There is a error in line 3...\n  ```\n  <script>@input</script>",
        "prefix": "lia-code-output"
    },
    "`code`": {
        "body": "`${1:code}`",
        "description": "Inline `code` has `back-ticks around` it.",
        "prefix": "lia-code-inline"
    },
    "actionscript (actionscript)": {
        "body": "actionscript",
        "prefix": "hili-actionscript"
    },
    "adoc (asciidoc)": {
        "body": "adoc",
        "prefix": "hili-adoc"
    },
    "apache (apache_conf)": {
        "body": "apache",
        "prefix": "hili-apache"
    },
    "apacheconf (apache_conf)": {
        "body": "apacheconf",
        "prefix": "hili-apacheconf"
    },
    "arm (assembly_x86)": {
        "body": "arm",
        "prefix": "hili-arm"
    },
    "armasm (assembly_x86)": {
        "body": "armasm",
        "prefix": "hili-armasm"
    },
    "as (actionscript)": {
        "body": "as",
        "prefix": "hili-as"
    },
    "asciidoc (asciidoc)": {
        "body": "asciidoc",
        "prefix": "hili-asciidoc"
    },
    "asm (assembly_x86)": {
        "body": "asm",
        "prefix": "hili-asm"
    },
    "atom (html)": {
        "body": "atom",
        "prefix": "hili-atom"
    },
    "attribute": {
        "body": "attribute: ${1:thx}",
        "description": "Attribution is an important issue. With the attribute command, you can define the attribution that is showed within the info field within the navigation pannel. These elements get also imported if you import the functionality from another course.\n\nA good attribution might look like the follwing ones...\n\nExample:\n  <!--\n  attribute: [AlaSQL](https://alasql.org)\n             by [Andrey Gershun](agershun@gmail.com)\n             & [Mathias Rangel Wulff](m@rawu.dk)\n             is licensed under [MIT](https://opensource.org/licenses/MIT)\n\n  attribute: [PapaParse](https://www.papaparse.com)\n             by [Matthew Holt](https://twitter.com/mholt6)\n             is licensed under [MIT](https://opensource.org/licenses/MIT)\n  -->\n",
        "prefix": "lia-macro-attribute"
    },
    "avrasm (assembly_x86)": {
        "body": "avrasm",
        "prefix": "hili-avrasm"
    },
    "bash (batchfile)": {
        "body": "bash",
        "prefix": "hili-bash"
    },
    "c (c_cpp)": {
        "body": "c",
        "prefix": "hili-c"
    },
    "c# (csharp)": {
        "body": "c#",
        "prefix": "hili-c#"
    },
    "c++ (c_cpp)": {
        "body": "c++",
        "prefix": "hili-c++"
    },
    "cc (c_cpp)": {
        "body": "cc",
        "prefix": "hili-cc"
    },
    "classroom": {
        "body": "classroom: ${1:disable}",
        "description": "Disable or enable the classroom feature for your course, by using this macro within the header of your course. You can use words like `false`, `disabled`, `0`, `OFF` ... LiaScript will recognize them as negative. All other words like wouldLoveToSeeThisFeature are treated as positive. __But better stick with `false`/`true`, `on`/`off`, `disable`/`enable`__\n\nExample:\n  <!--\n  classroom: false\n  -->\n",
        "prefix": "lia-macro-classroom"
    },
    "clj (clojure)": {
        "body": "clj",
        "prefix": "hili-clj"
    },
    "clojure (clojure)": {
        "body": "clojure",
        "prefix": "hili-clojure"
    },
    "coffee (coffee)": {
        "body": "coffee",
        "prefix": "hili-coffee"
    },
    "coffeescript (coffee)": {
        "body": "coffeescript",
        "prefix": "hili-coffeescript"
    },
    "color dot diagram": {
        "body": "               Title - dots\n6 | A a B b C c\n  | D d E e F f G g H h I i\n  | J j K k L l M m N n o O\n  | P p Q q R r S s T t U u\n  | V v W w X x Y y Z Z   *\n1 +------------------------\n  0                      24",
        "description": "The character is used as a color code, such as r stands for red, w for white, etc. Uppercase and lowercase characters define the size of the plotted dots. And if there is only one character, then it is plotted as a single dot only.\n\nExample:\n                  Colored - Dots\n     6 | A a B b C c\n       | D d E e F f G g H h I i\ny-axis | J j K k L l M m N n o O\n       | P p Q q R r S s T t U u\n       | V v W w X x Y y Z Z   *\n     1 +------------------------\n       0        x-axis        24\n\nThe definition of the title, x and y labels and their limits is optional, but the number of used pipes (|) and hyphens (-) define the resolution of the diagram.",
        "prefix": "lia-diagram-dots"
    },
    "console (sh)": {
        "body": "console",
        "prefix": "hili-console"
    },
    "cpp (c_cpp)": {
        "body": "cpp",
        "prefix": "hili-cpp"
    },
    "craftcms (twig)": {
        "body": "craftcms",
        "prefix": "hili-craftcms"
    },
    "cs (csharp)": {
        "body": "cs",
        "prefix": "hili-cs"
    },
    "csharp (csharp)": {
        "body": "csharp",
        "prefix": "hili-csharp"
    },
    "cson (coffee)": {
        "body": "cson",
        "prefix": "hili-cson"
    },
    "dark": {
        "body": "dark: ${1:true}",
        "description": "You can change the default appearance of your document, either if you prefer dark mode or light mode. This will not change the user preferences. The default mode is defined by the user settings.\n\nExample:\n  <!--\n  dark: true\n\n  dark: false\n  -->\n",
        "prefix": "lia-macro-dark"
    },
    "delphi (pascal)": {
        "body": "delphi",
        "prefix": "hili-delphi"
    },
    "dfm (pascal)": {
        "body": "dfm",
        "prefix": "hili-dfm"
    },
    "diff (diff)": {
        "body": "diff",
        "prefix": "hili-diff"
    },
    "django (django)": {
        "body": "django",
        "prefix": "hili-django"
    },
    "docker (dockerfile)": {
        "body": "docker",
        "prefix": "hili-docker"
    },
    "dockerfile (dockerfile)": {
        "body": "dockerfile",
        "prefix": "hili-dockerfile"
    },
    "dpr (pascal)": {
        "body": "dpr",
        "prefix": "hili-dpr"
    },
    "elixir (elixir)": {
        "body": "elixir",
        "prefix": "hili-elixir"
    },
    "erl (erlang)": {
        "body": "erl",
        "prefix": "hili-erl"
    },
    "erlang (erlang)": {
        "body": "erlang",
        "prefix": "hili-erlang"
    },
    "ex (elixir)": {
        "body": "ex",
        "prefix": "hili-ex"
    },
    "exs (elixir)": {
        "body": "exs",
        "prefix": "hili-exs"
    },
    "f# (fsharp)": {
        "body": "f#",
        "prefix": "hili-f#"
    },
    "f90 (fortran)": {
        "body": "f90",
        "prefix": "hili-f90"
    },
    "f95 (fortran)": {
        "body": "f95",
        "prefix": "hili-f95"
    },
    "fortran (fortran)": {
        "body": "fortran",
        "prefix": "hili-fortran"
    },
    "freepascal (pascal)": {
        "body": "freepascal",
        "prefix": "hili-freepascal"
    },
    "fs (fsharp)": {
        "body": "fs",
        "prefix": "hili-fs"
    },
    "fsharp (fsharp)": {
        "body": "fsharp",
        "prefix": "hili-fsharp"
    },
    "gcode (gcode)": {
        "body": "gcode",
        "prefix": "hili-gcode"
    },
    "gemspec (ruby)": {
        "body": "gemspec",
        "prefix": "hili-gemspec"
    },
    "go (golang)": {
        "body": "go",
        "prefix": "hili-go"
    },
    "golang (golang)": {
        "body": "golang",
        "prefix": "hili-golang"
    },
    "gyp (python)": {
        "body": "gyp",
        "prefix": "hili-gyp"
    },
    "h (c_cpp)": {
        "body": "h",
        "prefix": "hili-h"
    },
    "h++ (c_cpp)": {
        "body": "h++",
        "prefix": "hili-h++"
    },
    "handlebars (handlebars)": {
        "body": "handlebars",
        "prefix": "hili-handlebars"
    },
    "haskell (haskell)": {
        "body": "haskell",
        "prefix": "hili-haskell"
    },
    "haxe (haxe)": {
        "body": "haxe",
        "prefix": "hili-haxe"
    },
    "hbs (handlebars)": {
        "body": "hbs",
        "prefix": "hili-hbs"
    },
    "hpp (c_cpp)": {
        "body": "hpp",
        "prefix": "hili-hpp"
    },
    "hs (haskell)": {
        "body": "hs",
        "prefix": "hili-hs"
    },
    "html (html)": {
        "body": "html",
        "prefix": "hili-html"
    },
    "html.handlebars (handlebars)": {
        "body": "html.handlebars",
        "prefix": "hili-html.handlebars"
    },
    "html.hbs (handlebars)": {
        "body": "html.hbs",
        "prefix": "hili-html.hbs"
    },
    "hx (haxe)": {
        "body": "hx",
        "prefix": "hili-hx"
    },
    "iced (coffee)": {
        "body": "iced",
        "prefix": "hili-iced"
    },
    "import": {
        "body": "import: ${1:url}",
        "description": "You can import the main macros of other courses, simply by using the import command, which is followed by the raw url of the foreign course.\n\nExample:\n\n  ## section\n  <!--\n  import: https://raw.githubusercontent.com/liaTemplates/rextester_template/master/README.md\n  -->\n\n  ``` python\n  print(\"Hello World\")\n  ```\n  @Rextester.eval(@Python)",
        "prefix": "lia-macro-import"
    },
    "irb (ruby)": {
        "body": "irb",
        "prefix": "hili-irb"
    },
    "javascript (javascript)": {
        "body": "javascript",
        "prefix": "hili-javascript"
    },
    "jinja (django)": {
        "body": "jinja",
        "prefix": "hili-jinja"
    },
    "js (javascript)": {
        "body": "js",
        "prefix": "hili-js"
    },
    "lazarus (pascal)": {
        "body": "lazarus",
        "prefix": "hili-lazarus"
    },
    "lfm (pascal)": {
        "body": "lfm",
        "prefix": "hili-lfm"
    },
    "livescript (livescript)": {
        "body": "livescript",
        "prefix": "hili-livescript"
    },
    "lpr (pascal)": {
        "body": "lpr",
        "prefix": "hili-lpr"
    },
    "ls (livescript)": {
        "body": "ls",
        "prefix": "hili-ls"
    },
    "mak (makefile)": {
        "body": "mak",
        "prefix": "hili-mak"
    },
    "makefile (makefile)": {
        "body": "makefile",
        "prefix": "hili-makefile"
    },
    "markdown (markdown)": {
        "body": "markdown",
        "prefix": "hili-markdown"
    },
    "md (markdown)": {
        "body": "md",
        "prefix": "hili-md"
    },
    "mk (makefile)": {
        "body": "mk",
        "prefix": "hili-mk"
    },
    "mkd (markdown)": {
        "body": "mkd",
        "prefix": "hili-mkd"
    },
    "mkdown (markdown)": {
        "body": "mkdown",
        "prefix": "hili-mkdown"
    },
    "ml (ocaml)": {
        "body": "ml",
        "prefix": "hili-ml"
    },
    "mm (objectivec)": {
        "body": "mm",
        "prefix": "hili-mm"
    },
    "mode": {
        "body": "mode: ${1:Presentation}",
        "description": "You can change the default style of your document, either if you do not have any effects you can set mode to Textbook or start with and interactive Presentation. The three modes a the same as defined within the document at the upper right button. The default mode is defined by the user settings.\n\nExample:\n  <!--\n  mode: Presentation\n\n  mode: Slides\n\n  mode: Textbook\n  -->\n",
        "prefix": "lia-macro-mode"
    },
    "multiline diagram": {
        "body": "                                Multiline\n1.9 |\n    |                 ***\n  y |               *     *\n  - | r r r r r r r*r r r r*r r r r r r r\n  a |             *         *\n  x |            *           *\n  i | B B B B B * B B B B B B * B B B B B\n  s |         *                 *\n    | *  * *                       * *  *\n -1 +------------------------------------\n    0              x-axis               1",
        "description": "The character is used as a color code, such as r stands for red, B for blue, etc. Uppercase and lowercase characters define the size of the plotted dots. A sequence of equal characters gets interpreted as a poly-line, there are more than two characters and if there are no two characters at the same x position.\n\nExample:\n                                  Multiline\n  1.9 |\n      |                 ***\n    y |               *     *\n    - | r r r r r r r*r r r r*r r r r r r r\n    a |             *         *\n    x |            *           *\n    i | B B B B B * B B B B B B * B B B B B\n    s |         *                 *\n      | *  * *                       * *  *\n   -1 +------------------------------------\n      0            x-axis                 1\n\nThe definition of the title, x and y labels and their limits is optional, but the number of used pipes (|) and hyphens (-) define the resolution of the diagram.",
        "prefix": "lia-diagram-multiline"
    },
    "multiple choice quiz with 4 options": {
        "body": "[[${1: }]] ${2:Add as many elements as you want?}\n[[${3:X}]] ${4:The X marks the correct answer!}\n[[${5: }]] ${6:... this is wrong ...}\n[[${7:X}]] ${8:... this has to be selected too ...}",
        "description": "Insert a the following quiz dummy:\n\n[[ ]] Add as many elements as you want?\n[[X]] The X marks the correct answer!\n[[ ]] ... this is wrong ...\n[[X]] ... this has to be selected too ...",
        "prefix": "lia-quiz-multiple-choice-4"
    },
    "nc (gcode)": {
        "body": "nc",
        "prefix": "hili-nc"
    },
    "obj-c (objectivec)": {
        "body": "obj-c",
        "prefix": "hili-obj-c"
    },
    "objc (objectivec)": {
        "body": "objc",
        "prefix": "hili-objc"
    },
    "objectivec (objectivec)": {
        "body": "objectivec",
        "prefix": "hili-objectivec"
    },
    "ocaml (ocaml)": {
        "body": "ocaml",
        "prefix": "hili-ocaml"
    },
    "openscad (scad)": {
        "body": "openscad",
        "prefix": "hili-openscad"
    },
    "pas (pascal)": {
        "body": "pas",
        "prefix": "hili-pas"
    },
    "pascal (pascal)": {
        "body": "pascal",
        "prefix": "hili-pascal"
    },
    "patch (diff)": {
        "body": "patch",
        "prefix": "hili-patch"
    },
    "perl (perl)": {
        "body": "perl",
        "prefix": "hili-perl"
    },
    "php (php)": {
        "body": "php",
        "prefix": "hili-php"
    },
    "php3 (php)": {
        "body": "php3",
        "prefix": "hili-php3"
    },
    "php4 (php)": {
        "body": "php4",
        "prefix": "hili-php4"
    },
    "php5 (php)": {
        "body": "php5",
        "prefix": "hili-php5"
    },
    "php6 (php)": {
        "body": "php6",
        "prefix": "hili-php6"
    },
    "pl (perl)": {
        "body": "pl",
        "prefix": "hili-pl"
    },
    "plist (html)": {
        "body": "plist",
        "prefix": "hili-plist"
    },
    "pm (perl)": {
        "body": "pm",
        "prefix": "hili-pm"
    },
    "podspec (ruby)": {
        "body": "podspec",
        "prefix": "hili-podspec"
    },
    "powershell (powershell)": {
        "body": "powershell",
        "prefix": "hili-powershell"
    },
    "pp (puppet)": {
        "body": "pp",
        "prefix": "hili-pp"
    },
    "ps (powershell)": {
        "body": "ps",
        "prefix": "hili-ps"
    },
    "puppet (puppet)": {
        "body": "puppet",
        "prefix": "hili-puppet"
    },
    "py (python)": {
        "body": "py",
        "prefix": "hili-py"
    },
    "python (python)": {
        "body": "python",
        "prefix": "hili-python"
    },
    "rb (ruby)": {
        "body": "rb",
        "prefix": "hili-rb"
    },
    "repository": {
        "body": "repository: ${1:url}",
        "description": "Use this macro to redefine the respository information of your project, by default the course will display the GitHub, GitLab, or Dropbox origin. By adding this information to the head, you can define a static root for your project, which will also be visible on all exports.\n\nExample:\n  <!--\n  repository: https://github.com/andre-dietrich/liascript-snippets\n  -->\n",
        "prefix": "lia-macro-repository"
    },
    "rs (rust)": {
        "body": "rs",
        "prefix": "hili-rs"
    },
    "rss (html)": {
        "body": "rss",
        "prefix": "hili-rss"
    },
    "ruby (ruby)": {
        "body": "ruby",
        "prefix": "hili-ruby"
    },
    "rust (rust)": {
        "body": "rust",
        "prefix": "hili-rust"
    },
    "scad (scad)": {
        "body": "scad",
        "prefix": "hili-scad"
    },
    "sh (batchfile)": {
        "body": "sh",
        "prefix": "hili-sh"
    },
    "sharing": {
        "body": "sharing: ${1:disable}",
        "description": "Disable or enable sharing for your course, by using this macro within the header (no share-icon and button will be displayed). You can use words like `false`, `disabled`, `0`, `OFF` ... LiaScript will recognize them as negative. All other words like wouldLoveToSeeThisFeature are treated as positive. __But better stick with `false`/`true`, `on`/`off`, `disable`/`enable`__\n\nExample:\n  <!--\n  sharing: false\n  -->\n",
        "prefix": "lia-macro-sharing"
    },
    "shell (sh)": {
        "body": "shell",
        "prefix": "hili-shell"
    },
    "simple diagram": {
        "body": "             Combining dots and polylines\n1.9 |\n    |     DOTS\n  y |                                *\n  - |\n  a |                         *\n  x |                  *\n  i |         *\n  s |\n    | *\n -1 +------------------------------------\n    0            x-axis                 1",
        "description": "Simple dots and poly-line representations can be applied together in one diagram, if they use different characters.\n\nExample:\n              Combining dots and poly-lines\n  1.9 |\n      |     DOTS\n    y |                                *\n    - |\n    a |                         *\n    x |                  *\n    i |         *\n    s |\n      | *\n   -1 +------------------------------------\n      0            x-axis                 1\n\nThe definition of the title, x and y labels and their limits is optional, but the number of used pipes (|) and hyphens (-) define the resolution of the diagram.",
        "prefix": "lia-diagram-simple"
    },
    "single choice quiz with 3 options": {
        "body": "[(${1: })] ${2:This is wrong.}\n[(${3:X})] ${4:The only correct option.}\n[(${5: })] ${6:Still not right.}",
        "description": "Insert a the following quiz dummy:\n\n  [( )] This is wrong.\n  [(X)] The only correct option.\n  [( )] Still not right.",
        "prefix": "lia-quiz-single-choice-3"
    },
    "styl (stylus)": {
        "body": "styl",
        "prefix": "hili-styl"
    },
    "stylus (stylus)": {
        "body": "stylus",
        "prefix": "hili-stylus"
    },
    "tcl (tcl)": {
        "body": "tcl",
        "prefix": "hili-tcl"
    },
    "thor (ruby)": {
        "body": "thor",
        "prefix": "hili-thor"
    },
    "tk (tcl)": {
        "body": "tk",
        "prefix": "hili-tk"
    },
    "translateWithGoogle": {
        "body": "translateWithGoogle: ${1:disable}",
        "description": "Disable or enable the experimental google translation for your course, by using this macro within the header of your course. You can use words like `false`, `disabled`, `0`, `OFF` ... LiaScript will recognize them as negative. All other words like wouldLoveToSeeThisFeature are treated as positive. __But better stick with `false`/`true`, `on`/`off`, `disable`/`enable`__\n\nExample:\n  <!--\n  translateWithGoogle: false\n  -->\n",
        "prefix": "lia-macro-translateWithGoogle"
    },
    "ts (typescript)": {
        "body": "ts",
        "prefix": "hili-ts"
    },
    "twig (twig)": {
        "body": "twig",
        "prefix": "hili-twig"
    },
    "typescript (typescript)": {
        "body": "typescript",
        "prefix": "hili-typescript"
    },
    "v (verilog)": {
        "body": "v",
        "prefix": "hili-v"
    },
    "vbs (vbscript)": {
        "body": "vbs",
        "prefix": "hili-vbs"
    },
    "vbscript (vbscript)": {
        "body": "vbscript",
        "prefix": "hili-vbscript"
    },
    "verilog (verilog)": {
        "body": "verilog",
        "prefix": "hili-verilog"
    },
    "voice: Afrikaans Male": {
        "body": "Afrikaans Male",
        "prefix": "voice-afrikaans-male"
    },
    "voice: Albanian Male": {
        "body": "Albanian Male",
        "prefix": "voice-albanian-male"
    },
    "voice: Arabic Female": {
        "body": "Arabic Female",
        "prefix": "voice-arabic-female"
    },
    "voice: Arabic Male": {
        "body": "Arabic Male",
        "prefix": "voice-arabic-male"
    },
    "voice: Armenian Male": {
        "body": "Armenian Male",
        "prefix": "voice-armenian-male"
    },
    "voice: Australian Female": {
        "body": "Australian Female",
        "prefix": "voice-australian-english-female"
    },
    "voice: Australian Male": {
        "body": "Australian Male",
        "prefix": "voice-australian-english-male"
    },
    "voice: Bangla Bangladesh Female": {
        "body": "Bangla Bangladesh Female",
        "prefix": "voice-bangla-bangladesh-female"
    },
    "voice: Bangla Bangladesh Male": {
        "body": "Bangla Bangladesh Male",
        "prefix": "voice-bangla-bangladesh-male"
    },
    "voice: Bangla India Female": {
        "body": "Bangla India Female",
        "prefix": "voice-bangla-india-female"
    },
    "voice: Bangla India Male": {
        "body": "Bangla India Male",
        "prefix": "voice-bangla-india-male"
    },
    "voice: Bosnian Male": {
        "body": "Bosnian Male",
        "prefix": "voice-bosnian-male"
    },
    "voice: Brazilian Portuguese Female": {
        "body": "Brazilian Portuguese Female",
        "prefix": "voice-brazilian-portuguese-female"
    },
    "voice: Brazilian Portuguese Male": {
        "body": "Brazilian Portuguese Male",
        "prefix": "voice-brazilian-portuguese-male"
    },
    "voice: Catalan Male": {
        "body": "Catalan Male",
        "prefix": "voice-catalan-male"
    },
    "voice: Chinese (Hong Kong) Female": {
        "body": "Chinese (Hong Kong) Female",
        "prefix": "voice-chinese-hong-kong-female"
    },
    "voice: Chinese (Hong Kong) Male": {
        "body": "Chinese (Hong Kong) Male",
        "prefix": "voice-chinese-hong-kong-male"
    },
    "voice: Chinese Female": {
        "body": "Chinese Female",
        "prefix": "voice-chinese-female"
    },
    "voice: Chinese Male": {
        "body": "Chinese Male",
        "prefix": "voice-chinese-male"
    },
    "voice: Chinese Taiwan Female": {
        "body": "Chinese Taiwan Female",
        "prefix": "voice-chinese-taiwan-female"
    },
    "voice: Chinese Taiwan Male": {
        "body": "Chinese Taiwan Male",
        "prefix": "voice-chinese-taiwan-male"
    },
    "voice: Croatian Male": {
        "body": "Croatian Male",
        "prefix": "voice-croatian-male"
    },
    "voice: Czech Female": {
        "body": "Czech Female",
        "prefix": "voice-czech-female"
    },
    "voice: Czech Male": {
        "body": "Czech Male",
        "prefix": "voice-czech-male"
    },
    "voice: Danish Female": {
        "body": "Danish Female",
        "prefix": "voice-danish-female"
    },
    "voice: Danish Male": {
        "body": "Danish Male",
        "prefix": "voice-danish-male"
    },
    "voice: Deutsch Female": {
        "body": "Deutsch Female",
        "prefix": "voice-deutsch-female"
    },
    "voice: Deutsch Male": {
        "body": "Deutsch Male",
        "prefix": "voice-deutsch-male"
    },
    "voice: Dutch Female": {
        "body": "Dutch Female",
        "prefix": "voice-dutch-female"
    },
    "voice: Dutch Male": {
        "body": "Dutch Male",
        "prefix": "voice-dutch-male"
    },
    "voice: Esperanto Male": {
        "body": "Esperanto Male",
        "prefix": "voice-esperanto-male"
    },
    "voice: Estonian Male": {
        "body": "Estonian Male",
        "prefix": "voice-estonian-male"
    },
    "voice: Filipino Female": {
        "body": "Filipino Female",
        "prefix": "voice-filipino-female"
    },
    "voice: Filipino Male": {
        "body": "Filipino Male",
        "prefix": "voice-filipino-male"
    },
    "voice: Finnish Female": {
        "body": "Finnish Female",
        "prefix": "voice-finnish-female"
    },
    "voice: Finnish Male": {
        "body": "Finnish Male",
        "prefix": "voice-finnisch-male"
    },
    "voice: French Canadian Female": {
        "body": "French Canadian Female",
        "prefix": "voice-french-vanadian-female"
    },
    "voice: French Canadian Male": {
        "body": "French Male",
        "prefix": "voice-french-canadian-male"
    },
    "voice: French Female": {
        "body": "French Female",
        "prefix": "voice-french-female"
    },
    "voice: French Male": {
        "body": "French Male",
        "prefix": "voice-french-male"
    },
    "voice: German Female": {
        "body": "Deutsch Female",
        "prefix": "voice-german-female"
    },
    "voice: German Male": {
        "body": "Deutsch Male",
        "prefix": "voice-german-male"
    },
    "voice: Greek Female": {
        "body": "Greek Female",
        "prefix": "voice-greek-female"
    },
    "voice: Greek Male": {
        "body": "Greek Male",
        "prefix": "voice-greek-male"
    },
    "voice: Hindi Female": {
        "body": "Hindi Female",
        "prefix": "voice-hindi-female"
    },
    "voice: Hindi Male": {
        "body": "Hindi Male",
        "prefix": "voice-hindi-male"
    },
    "voice: Hungarian Female": {
        "body": "Hungarian Female",
        "prefix": "voice-hungarian-female"
    },
    "voice: Hungarian Male": {
        "body": "Hungarian Male",
        "prefix": "voice-hungarian-male"
    },
    "voice: Icelandic Male": {
        "body": "Icelandic Male",
        "prefix": "voice-icelandic-male"
    },
    "voice: Indonesian Female": {
        "body": "Indonesian Female",
        "prefix": "voice-indonesian-female"
    },
    "voice: Indonesian Male": {
        "body": "Indonesian Male",
        "prefix": "voice-indonesian-male"
    },
    "voice: Italian Female": {
        "body": "Italian Female",
        "prefix": "voice-italian-female"
    },
    "voice: Italian Male": {
        "body": "Italian Male",
        "prefix": "voice-italian-male"
    },
    "voice: Japanese Female": {
        "body": "Japanese Female",
        "prefix": "voice-japanese-female"
    },
    "voice: Japanese Male": {
        "body": "Japanese Male",
        "prefix": "voice-japanese-male"
    },
    "voice: Korean Female": {
        "body": "Korean Female",
        "prefix": "voice-korean-female"
    },
    "voice: Korean Male": {
        "body": "Korean Male",
        "prefix": "voice-korean-male"
    },
    "voice: Latin Female": {
        "body": "Latin Female",
        "prefix": "voice-latin-female"
    },
    "voice: Latin Male": {
        "body": "Latin Male",
        "prefix": "voice-latin-male"
    },
    "voice: Latvian Male": {
        "body": "Latvian Male",
        "prefix": "voice-latvian-male"
    },
    "voice: Macedonian Male": {
        "body": "Macedonian Male",
        "prefix": "voice-macedonian-male"
    },
    "voice: Moldavian Female": {
        "body": "Moldavian Female",
        "prefix": "voice-moldavian-female"
    },
    "voice: Moldavian Male": {
        "body": "Moldavian Male",
        "prefix": "voice-moldavian-male"
    },
    "voice: Montenegrin Male": {
        "body": "Montenegrin Male",
        "prefix": "voice-montenegrin-male"
    },
    "voice: Nepali": {
        "body": "Nepali",
        "prefix": "voice-nepali"
    },
    "voice: Norwegian Female": {
        "body": "Norwegian Female",
        "prefix": "voice-norwegian-female"
    },
    "voice: Norwegian Male": {
        "body": "Norwegian Male",
        "prefix": "voice-norwegian-male"
    },
    "voice: Polish Female": {
        "body": "Polish Female",
        "prefix": "voice-polish-female"
    },
    "voice: Polish Male": {
        "body": "Polish Male",
        "prefix": "voice-polish-male"
    },
    "voice: Portuguese Female": {
        "body": "Portuguese Female",
        "prefix": "voice-portuguese-female"
    },
    "voice: Portuguese Male": {
        "body": "Portuguese Male",
        "prefix": "voice-portuguese-male"
    },
    "voice: Romanian Female": {
        "body": "Romanian Female",
        "prefix": "voice-romanian-female"
    },
    "voice: Romanian Male": {
        "body": "Romanian Male",
        "prefix": "voice-romanian-male"
    },
    "voice: Russian Female": {
        "body": "Russian Female",
        "prefix": "voice-russian-female"
    },
    "voice: Russian Male": {
        "body": "Russian Male",
        "prefix": "voice-russian-male"
    },
    "voice: Serbian Male": {
        "body": "Serbian Male",
        "prefix": "voice-serbian-male"
    },
    "voice: Serbo-Croatian Male": {
        "body": "Serbo-Croatian Male",
        "prefix": "voice-serbo-croatian-male"
    },
    "voice: Sinhala": {
        "body": "Sinhala",
        "prefix": "voice-sinhala"
    },
    "voice: Slovak Female": {
        "body": "Slovak Female",
        "prefix": "voice-slovak-female"
    },
    "voice: Slovak Male": {
        "body": "Slovak Male",
        "prefix": "voice-slovak-male"
    },
    "voice: Spanish Female": {
        "body": "Spanish Female",
        "prefix": "voice-spanish-female"
    },
    "voice: Spanish Latin American Female": {
        "body": "Spanish Latin American Female",
        "prefix": "voice-spanish-latin-america-female"
    },
    "voice: Spanish Latin American Male": {
        "body": "Spanish Latin American Male",
        "prefix": "voice-spanish-latin-america-male"
    },
    "voice: Spanish Male": {
        "body": "Spanish Male",
        "prefix": "voice-spanish-male"
    },
    "voice: Swahili Male": {
        "body": "Swahili Male",
        "prefix": "voice-swahili-male"
    },
    "voice: Swedish Female": {
        "body": "Swedish Female",
        "prefix": "voice-swedish-female"
    },
    "voice: Swedish Male": {
        "body": "Swedish Male",
        "prefix": "voice-swedish-male"
    },
    "voice: Tamil Male": {
        "body": "Tamil Male",
        "prefix": "voice-tamil-male"
    },
    "voice: Thai Female": {
        "body": "Thai Female",
        "prefix": "voice-tamil-female"
    },
    "voice: Thai Male": {
        "body": "Thai Male",
        "prefix": "voice-thai-male"
    },
    "voice: Turkish Female": {
        "body": "Turkish Female",
        "prefix": "voice-turkish-female"
    },
    "voice: Turkish Male": {
        "body": "Turkish Male",
        "prefix": "voice-turkish-male"
    },
    "voice: UK English Female": {
        "body": "UK English Female",
        "prefix": "voice-uk-english-female"
    },
    "voice: UK English Male": {
        "body": "UK English Male",
        "prefix": "voice-uk-english-male"
    },
    "voice: US English Female": {
        "body": "US English Female",
        "prefix": "voice-us-english-female"
    },
    "voice: US English Male": {
        "body": "US English Male",
        "prefix": "voice-us-english-male"
    },
    "voice: Ukrainian Female": {
        "body": "Ukrainian Female",
        "prefix": "voice-ukrainian-female"
    },
    "voice: Vietnamese Female": {
        "body": "Vietnamese Female",
        "prefix": "voice-vietnamese-female"
    },
    "voice: Vietnamese Male": {
        "body": "Vietnamese Male",
        "prefix": "voice-vietnamese-male"
    },
    "voice: Welsh Male": {
        "body": "Welsh Male",
        "prefix": "voice-welsh-male"
    },
    "x86asm (assembly_x86)": {
        "body": "x86asm",
        "prefix": "hili-x86asm"
    },
    "xhtml (html)": {
        "body": "xhtml",
        "prefix": "hili-xhtml"
    },
    "xjb (html)": {
        "body": "xjb",
        "prefix": "hili-xjb"
    },
    "xpath (xquery)": {
        "body": "xpath",
        "prefix": "hili-xpath"
    },
    "xq (xquery)": {
        "body": "xq",
        "prefix": "hili-xq"
    },
    "xsd (html)": {
        "body": "xsd",
        "prefix": "hili-xsd"
    },
    "xsl (html)": {
        "body": "xsl",
        "prefix": "hili-xsl"
    },
    "zsh (batchfile)": {
        "body": "zsh",
        "prefix": "hili-zsh"
    },
    "{from-to}{element}": {
        "body": "{${1:from}-${2:to}}{${3:__element__}}",
        "description": "Use simple inline effects to highlight specific elements within a Markdown block. Simply enclose your elements within two subsequent braces ({}{}), whereby the first one contains two numbers separated by (-) the first number defines the time of appearance and the second one the time of disappearance. The element contains the Markdown elements for highlighting (text, videos, images, etc.)\nYou can tweak your effects with additional animations and styling. Animate.css is included at default.\n\nExamples:\n  This block contains some {1-2}{I appear at fragment 1 and disapper at 2}.\n\n  Nesting is allowed but has to make sense {1-3}{I will rest from 1 to 3 {4}{I will not be visible}}.\n\n  With styling ++ {1-3}{bouncing red and delayed}<!--\n        class = \"animated infinite bounce\"\n        style = \"animation-delay: 3s; color: red;\"\n      -->",
        "prefix": "lia-effect-inline2"
    },
    "{number}{element}": {
        "body": "{${1:number}}{${2:__element__}}",
        "description": "Use simple inline effects to highlight specific elements within a Markdown block. Simply enclose your elements within two subsequent braces ({}{}), whereby the first one is used to hold the number of appearance, while the will contain your text, image, video, what so ever ...\nYou can tweak your effects with additional animations and styling. Animate.css is included at default.\n\nExamples:\n  This block contains some {1}{inline __effects__} that will appear {2}{subsequently}.\n\n  Inline effects can also contain more effects {1}{I will appear first {2}{and I as a second}}.\n\n  With styling ++ {3}{bouncing red and delayed}<!--\n        class = \"animated infinite bounce\"\n        style = \"animation-delay: 3s; color: red;\"\n      -->",
        "prefix": "lia-effect-inline"
    },
    "{{from-to}}": {
        "body": "    {${1:from}-${2:to}}\n$3",
        "description": "Use block effects to let entire Markdown blocks appear or disappear. It works exactly as simple inline effects. But the number of appearance has to be put in double braces, followed by a hyphen (-) and the number of disappearance.\nThe entire block can also be styled and the animation tweaked, but the required comment tag has to be defined before the Markdown block. Animate.css is included at default.\n\nExamples:\n                   {{1-4}}\n  This entire block will appear with the first fragment.\n  And remain untill the fourth fragment of this slide.\n\n                   {{0-1}}\n  ```js\n  // I will be present emeadiately and disapper on the\n  // 1st fragment.\n  ```\n\n  <!-- class = \"animated rollIn\" -->\n       {{3-4}}\n  | Also | with  |\n  |------|-------|\n  | any  | table |",
        "prefix": "lia-effect-block"
    },
    "{{from-to}} *** ... ***": {
        "body": "                 {{${1:from}-${2:to}}}\n************************************************\n\n${3:Insert your Markdown blocks in here ...}\n\n************************************************",
        "description": "You can bundle multiple blocks to one effect block by enclosing them into two lines of stars (*). The rest works exactly as block effects...\nThe entire block can also be styled and the animation tweaked, but the required comment tag has to be defined before the Markdown block. Animate.css is included at default.\n\nExamples:\n                    {{1-3}}\n  *************************************************\n\n  Both blocks will appear at once and disappear at\n  the third fragment. Nesting of other {2}{inline}\n  and block effects is also allowed.\n\n\n  | Also | with  |\n  |------|-------|\n  | any  | table |\n\n  **************************************************",
        "prefix": "lia-effect-multiblock2"
    },
    "{{number}}": {
        "body": "    {${1:number}}\n$2",
        "description": "Use block effects to let entire Markdown blocks appear or disappear. It works exactly as simple inline effects. But the number of appearance has to be put in double braces.\nThe entire block can also be styled and the animation tweaked, but the required comment tag has to be defined before the Markdown block. Animate.css is included at default.\n\nExamples:\n                    {{1}}\n  This entire block will appear with the first\n  fragment. And remain till the end of this slide.\n\n                    {{2}}\n  ```js\n  // this works with any markdown block\n  ```\n\n  <!-- class = \"animated rollIn\" -->\n       {{3}}\n  | Also | with  |\n  |------|-------|\n  | any  | table |",
        "prefix": "lia-effect-block"
    },
    "{{number}} *** ... ***": {
        "body": "                 {{${1:number}}}\n************************************************\n\n${2:Insert your Markdown blocks in here ...}\n\n************************************************",
        "description": "You can bundle multiple blocks to one effect block by enclosing them into two lines of stars (*). The rest works exactly as block effects...\nThe entire block can also be styled and the animation tweaked, but the required comment tag has to be defined before the Markdown block. Animate.css is included at default.\n\nExamples:\n                    {{1}}\n  *************************************************\n\n  Both blocks will appear at once. Nesting of other\n  {2}{inline} and block effects is also allowed.\n\n\n  | Also | with  |\n  |------|-------|\n  | any  | table |\n\n  **************************************************",
        "prefix": "lia-effect-multiblock"
    },
    "{{|>}}": {
        "body": "{{|>}}",
        "description": "Use the `|>` or `!>` to indicate, that the entire block below should be read out loud in the default language. It is also possible to add effect-numbers to indicate the appearance and also to add another language. Start typing \"voice\" to select another narrator and language.\n\nExample:\n\n     {{|>}}\n  Read this block after the user has clicked the play button.\n\n     {{3 |>}}\n  This block will only appear at the 3rd animation step.\n\n     {{1-2 |> Australian Female}}\n  This will appear at step 1 and disappear at animation step 2, when the\n  users clicks on it, an Australian female voice is used as a narrator.",
        "prefix": "lia-effect-block-playback"
    },
    "{|>}{read this text}": {
        "body": "{|>}{${1:text to read}}",
        "description": "With this triangle notation it is possible to add a playback button, which will read out loud the text within the second braces. It is possible to add additional animation definitions and also to change the voice.\n\nStart typing voice, if you want to change the narrator and the language.\n\nExamples:\n  Within this block {|>}{this text will be spoken out loud}.\n\n  Nesting is allowed but has to make sense {1-3 |>}{I speak from 1 to 3 {4}{and nesting is also possible}}.\n\n  If you want to {|> Australian Female}{it is also possible to change the voice}.",
        "prefix": "lia-effect-inline-playback"
    },
    "~text~": {
        "body": "~${1:strike}~",
        "prefix": "lia-text-strike"
    },
    "~~text~~": {
        "body": "~~${1:underline}~~",
        "prefix": "lia-text-underline"
    },
    "~~~text~~~": {
        "body": "~~~${1:strike underline}~~~",
        "prefix": "lia-text-strike-underline"
    }
}