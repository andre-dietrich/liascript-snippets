'.source.gfm, .text.md':
  '@author':
    'prefix': 'lia-macro-author'
    'body': '@author'
    'description': """
      Gets replaced by the author defined in the header.
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '@date':
    'prefix': 'lia-macro-date'
    'body': '@date'
    'description': """
      Gets replaced by the date defined in the header.
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '@email':
    'prefix': 'lia-macro-email'
    'body': '@email'
    'description': """
      Gets replaced by the email defined in the header.
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '@input':
    'prefix': 'lia-macro-input'
    'body': '@input'
    'description': """
      Use this only in conjunction with executable code and projects or with quizzes. This macro can only be used in a script tag and gets replaced by the current user input.
      To refer to the inputs in a project, use the parameterized macro:

        @input(0)   <== equal to @input
        @input(1)
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '@section':
    'prefix': 'lia-macro-section'
    'body': '@section'
    'description': """
      Gets replaced by the current section number.
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '@uid':
    'prefix': 'lia-macro-uid'
    'body': '@uid'
    'description': """
      Generates a UID that can be used to name tags uniquely.
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '@version':
    'prefix': 'lia-macro-version'
    'body': '@version'
    'description': """
      Gets replaced by the version defined in the header.
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'

  '@persistent':
    'prefix': 'lia-macro-persistent'
    'body': 'persistent: ${1:false}'
    'body_vscode': 'persistent: ${1|false,true|}'
    'description': """
      If you do not want to store the course state wihin indexeddb and also not within the local course index, you can use this macro within the header, which means that no trace of this course will be stored locally.

      Example:
        <!--
        persistent: false
        -->
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'

  'import':
    'prefix': 'lia-macro-import'
    'body': 'import: ${1:url}'
    'description': """
      You can import the main macros of other courses, simply by using the import command, which is followed by the raw url of the foreign course.

      Example:

        ## section
        <!--
        import: https://raw.githubusercontent.com/liaTemplates/rextester_template/master/README.md
        -->

        ``` python
        print("Hello World")
        ```
        @Rextester.eval(@Python)
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/templates/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  'attribute':
    'prefix': 'lia-macro-attribute'
    'body': 'attribute: ${1:thx}'
    'description': """
      Attribution is an important issue. With the attribute command, you can define the attribution that is showed within the info field within the navigation pannel. These elements get also imported if you import the functionality from another course.

      A good attribution might look like the follwing ones...

      Example:
        <!--
        attribute: [AlaSQL](https://alasql.org)
                   by [Andrey Gershun](agershun@gmail.com)
                   & [Mathias Rangel Wulff](m@rawu.dk)
                   is licensed under [MIT](https://opensource.org/licenses/MIT)

        attribute: [PapaParse](https://www.papaparse.com)
                   by [Matthew Holt](https://twitter.com/mholt6)
                   is licensed under [MIT](https://opensource.org/licenses/MIT)
        -->

    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/templates/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  'dark':
    'prefix': 'lia-macro-dark'
    'body': 'dark: ${1:true}'
    'body_vscode': 'dark: ${1|true,false|}'
    'description': """
      You can change the default appearance of your document, either if you prefer dark mode or light mode. This will not change the user preferences. The default mode is defined by the user settings.

      Example:
        <!--
        dark: true

        dark: false
        -->

    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/templates/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'

  'mode':
    'prefix': 'lia-macro-mode'
    'body': 'mode: ${1:Presentation}'
    'body_vscode': 'mode: ${1|Presentation,Slides,Textbook|}'
    'description': """
      You can change the default style of your document, either if you do not have any effects you can set mode to Textbook or start with and interactive Presentation. The three modes a the same as defined within the document at the upper right button. The default mode is defined by the user settings.

      Example:
        <!--
        mode: Presentation

        mode: Slides

        mode: Textbook
        -->

    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/templates/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  'classroom':
    'prefix': 'lia-macro-classroom'
    'body': 'classroom: ${1:disable}'
    'body_vscode': 'classroom: ${1|disable,enable|}'
    'description': """
      Disable or enable the classroom feature for your course, by using this macro within the header of your course. You can use words like `false`, `disabled`, `0`, `OFF` ... LiaScript will recognize them as negative. All other words like wouldLoveToSeeThisFeature are treated as positive. __But better stick with `false`/`true`, `on`/`off`, `disable`/`enable`__

      Example:
        <!--
        classroom: false
        -->

    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/templates/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'

  'translateWithGoogle':
    'prefix': 'lia-macro-translateWithGoogle'
    'body': 'translateWithGoogle: ${1:disable}'
    'body_vscode': 'translateWithGoogle: ${1|disable,enable|}'
    'description': """
      Disable or enable the experimental google translation for your course, by using this macro within the header of your course. You can use words like `false`, `disabled`, `0`, `OFF` ... LiaScript will recognize them as negative. All other words like wouldLoveToSeeThisFeature are treated as positive. __But better stick with `false`/`true`, `on`/`off`, `disable`/`enable`__

      Example:
        <!--
        translateWithGoogle: false
        -->

    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/templates/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  'sharing':
    'prefix': 'lia-macro-sharing'
    'body': 'sharing: ${1:disable}'
    'body_vscode': 'sharing: ${1|disable,enable|}'
    'description': """
      Disable or enable sharing for your course, by using this macro within the header (no share-icon and button will be displayed). You can use words like `false`, `disabled`, `0`, `OFF` ... LiaScript will recognize them as negative. All other words like wouldLoveToSeeThisFeature are treated as positive. __But better stick with `false`/`true`, `on`/`off`, `disable`/`enable`__

      Example:
        <!--
        sharing: false
        -->

    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/templates/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  'repository':
    'prefix': 'lia-macro-repository'
    'body': 'repository: ${1:url}'
    'description': """
      Use this macro to redefine the respository information of your project, by default the course will display the GitHub, GitLab, or Dropbox origin. By adding this information to the head, you can define a static root for your project, which will also be visible on all exports.

      Example:
        <!--
        repository: https://github.com/andre-dietrich/liascript-snippets
        -->

    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/templates/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '@name: one line':
    'prefix': 'lia-macro-definition-line'
    'body': '@${1:name}: ${2:line}'
    'description': """
      Use macros to deal with repetitive task and to make the document more readable. You can define your own macros within the main and section headers. Start your macro with an (@) sign and give it a name. Separate the name from the body with a colon (:). If you want to parameterize your macro, use @0, @1, ... for the parameter id. It is a simple string substitution mechanism, and the parameters are separated by a comma (,). If you have commas in your parameters, then use back-tics (`) to enclose this parameter. And triple back-tics (```) to enclose multi-line parameters.

      Example:

        ## section
        <!--
        @red: <!-- style="color: red;" -->

        @bold_italic: __@0__ _@1_
        -->

        @red
        This whole paragraph will be read and this will be:
        @bold_italic(I am Bold,`I am Italic,, I am too`).
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '@name ... body ... @end':
    'prefix': 'lia-macro-definition-block'
    'body': """
      @${1:name}
      ${2:param1 -> __@0__}
      @end
    """
    'description': """
      Use macros to deal with repetitive task and to make the document more readable. Multi-line macros start with an (@your_name) and end with (@end). Parameters can also be passed as to single line macros.

      Example:

        ## section
        <!--
        @evalJS
        <script>
          try{
            eval(`@input`);
          } catch (e) {
            var log = e.stack.match(/((.*?):(.*))\n.*?(:(\d+):(\d+)\)\n)/);
            var err_msg = new LiaError(log[1] + " =>  (" + log[4], 1);
            err_msg.add_detail(0, log[3], "error", log[5]-1, log[6]);
            throw err_msg;
          }
        </script>
        @end
        -->

        eval this code with erros:

        ```js
        let x = 12;
        x * c;
        ```
        @evalJS
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/docs/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '``` @[macro](url-param) ```':
    'prefix': 'lia-macro-call-link'
    'body': '@[${1:macro}](${2:url-param})'
    'description': """
      This type of macro-call comes handy, if you want to refere to a certain URL and want other Markdown readers to show this information as a link. It is also possible to add additional parameters within parentheses, whereby the URL is always used as the last parameter.

      Example:

        @[doSomethingWith](URL)

        @[doSomethingWith(1,2,3)](URL "this will be ignored by now")
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/mermaid_template/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'


  '``` @macro ```':
    'prefix': 'lia-macro-call-block'
    'body': """
      ```${1:lang} @${2:macro}
      ${3:a multiline
      parameter}
      ```
    """
    'description': """
      If you have a more complex multi-line macro definition, you can also use the following style so that it gets rendered at least in a readable manner by Github for example. Thus, you can place your macro call into into the code-block header, the first (optional) language parameter gets ignored and, whereby the following elements within the block are passed as the last multi-line parameter to that call.

      Example:

          ## Macro
          <!--
          link:   https://pannellum.org/css/style.css
                  https://cdn.pannellum.org/2.4/pannellum.css

          script: https://cdn.pannellum.org/2.4/pannellum.js

          @panorama
          <div id="panorama_@0" style="width: 100%; height: 400px;"></div>
          <script>
          pannellum.viewer('panorama_@0', {
              "type": "equirectangular",
              "panorama": "@1",
              "autoLoad": false,
              "hotSpots": [@2]
          });
          </script>
          @end
          -->

          ```json @panorama("0",https://pannellum.org/images/cerro-toco-0.jpg)
          {
              "pitch": 14.1,
              "yaw": 1.5,
              "type": "info",
              "text": "Baltimore Museum of Art",
              "URL": "https://artbma.org/"
          },
          {
              "pitch": -0.9,
              "yaw": 144.4,
              "type": "info",
              "text": "North Charles Street"
          }
          ```
    """
    'descriptionMoreURL': 'https://liascript.github.io/course/?https://raw.githubusercontent.com/liaScript/mermaid_template/master/README.md'
    'leftLabelHTML': '<span style="color:#ff0">ðŸ› </span>'
